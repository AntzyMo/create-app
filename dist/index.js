#!/usr/bin/env node
(()=>{var t={6563:(t,e,i)=>{"use strict";const s=i(9370),r=i(1017),n=i(8637).mkdirsSync,o=i(9683).utimesMillisSync,h=i(1901);function l(t,e,i,n){const o=(n.dereference?s.statSync:s.lstatSync)(e);if(o.isDirectory())return function(t,e,i,r,n){return e?u(i,r,n):function(t,e,i,r){return s.mkdirSync(i),u(e,i,r),a(i,t)}(t.mode,i,r,n)}(o,t,e,i,n);if(o.isFile()||o.isCharacterDevice()||o.isBlockDevice())return function(t,e,i,r,n){return e?function(t,e,i,r){if(r.overwrite)return s.unlinkSync(i),c(t,e,i,r);if(r.errorOnExist)throw new Error(`'${i}' already exists`)}(t,i,r,n):c(t,i,r,n)}(o,t,e,i,n);if(o.isSymbolicLink())return function(t,e,i,n){let o=s.readlinkSync(e);if(n.dereference&&(o=r.resolve(process.cwd(),o)),t){let t;try{t=s.readlinkSync(i)}catch(t){if("EINVAL"===t.code||"UNKNOWN"===t.code)return s.symlinkSync(o,i);throw t}if(n.dereference&&(t=r.resolve(process.cwd(),t)),h.isSrcSubdir(o,t))throw new Error(`Cannot copy '${o}' to a subdirectory of itself, '${t}'.`);if(s.statSync(i).isDirectory()&&h.isSrcSubdir(t,o))throw new Error(`Cannot overwrite '${t}' with '${o}'.`);return function(t,e){return s.unlinkSync(e),s.symlinkSync(t,e)}(o,i)}return s.symlinkSync(o,i)}(t,e,i,n);if(o.isSocket())throw new Error(`Cannot copy a socket file: ${e}`);if(o.isFIFO())throw new Error(`Cannot copy a FIFO pipe: ${e}`);throw new Error(`Unknown file: ${e}`)}function c(t,e,i,r){return s.copyFileSync(e,i),r.preserveTimestamps&&function(t,e,i){(function(t){return 0==(128&t)})(t)&&function(t,e){a(t,128|e)}(i,t),function(t,e){const i=s.statSync(t);o(e,i.atime,i.mtime)}(e,i)}(t.mode,e,i),a(i,t.mode)}function a(t,e){return s.chmodSync(t,e)}function u(t,e,i){s.readdirSync(t).forEach((s=>function(t,e,i,s){const n=r.join(e,t),o=r.join(i,t),{destStat:c}=h.checkPathsSync(n,o,"copy",s);return function(t,e,i,s){if(!s.filter||s.filter(e,i))return l(t,e,i,s)}(c,n,o,s)}(s,t,e,i)))}t.exports=function(t,e,i){"function"==typeof i&&(i={filter:i}),(i=i||{}).clobber=!("clobber"in i)||!!i.clobber,i.overwrite="overwrite"in i?!!i.overwrite:i.clobber,i.preserveTimestamps&&"ia32"===process.arch&&process.emitWarning("Using the preserveTimestamps option in 32-bit node is not recommended;\n\n\tsee https://github.com/jprichardson/node-fs-extra/issues/269","Warning","fs-extra-WARN0002");const{srcStat:o,destStat:c}=h.checkPathsSync(t,e,"copy",i);return h.checkParentPathsSync(t,o,e,"copy"),function(t,e,i,o){if(o.filter&&!o.filter(e,i))return;const h=r.dirname(i);return s.existsSync(h)||n(h),l(t,e,i,o)}(c,t,e,i)}},1813:(t,e,i)=>{"use strict";const s=i(9370),r=i(1017),n=i(8637).mkdirs,o=i(6832).pathExists,h=i(9683).utimesMillis,l=i(1901);function c(t,e,i,s,h){const l=r.dirname(i);o(l,((r,o)=>r?h(r):o?u(t,e,i,s,h):void n(l,(r=>r?h(r):u(t,e,i,s,h)))))}function a(t,e,i,s,r,n){Promise.resolve(r.filter(i,s)).then((o=>o?t(e,i,s,r,n):n()),(t=>n(t)))}function u(t,e,i,n,o){(n.dereference?s.stat:s.lstat)(e,((h,c)=>h?o(h):c.isDirectory()?function(t,e,i,r,n,o){return e?m(i,r,n,o):function(t,e,i,r,n){s.mkdir(i,(s=>{if(s)return n(s);m(e,i,r,(e=>e?n(e):f(i,t,n)))}))}(t.mode,i,r,n,o)}(c,t,e,i,n,o):c.isFile()||c.isCharacterDevice()||c.isBlockDevice()?function(t,e,i,r,n,o){return e?function(t,e,i,r,n){if(!r.overwrite)return r.errorOnExist?n(new Error(`'${i}' already exists`)):n();s.unlink(i,(s=>s?n(s):d(t,e,i,r,n)))}(t,i,r,n,o):d(t,i,r,n,o)}(c,t,e,i,n,o):c.isSymbolicLink()?function(t,e,i,n,o){s.readlink(e,((e,h)=>e?o(e):(n.dereference&&(h=r.resolve(process.cwd(),h)),t?void s.readlink(i,((e,c)=>e?"EINVAL"===e.code||"UNKNOWN"===e.code?s.symlink(h,i,o):o(e):(n.dereference&&(c=r.resolve(process.cwd(),c)),l.isSrcSubdir(h,c)?o(new Error(`Cannot copy '${h}' to a subdirectory of itself, '${c}'.`)):t.isDirectory()&&l.isSrcSubdir(c,h)?o(new Error(`Cannot overwrite '${c}' with '${h}'.`)):function(t,e,i){s.unlink(e,(r=>r?i(r):s.symlink(t,e,i)))}(h,i,o)))):s.symlink(h,i,o))))}(t,e,i,n,o):c.isSocket()?o(new Error(`Cannot copy a socket file: ${e}`)):c.isFIFO()?o(new Error(`Cannot copy a FIFO pipe: ${e}`)):o(new Error(`Unknown file: ${e}`))))}function d(t,e,i,r,n){s.copyFile(e,i,(s=>s?n(s):r.preserveTimestamps?function(t,e,i,s){return function(t){return 0==(128&t)}(t)?function(t,e,i){return f(t,128|e,i)}(i,t,(r=>r?s(r):p(t,e,i,s))):p(t,e,i,s)}(t.mode,e,i,n):f(i,t.mode,n)))}function p(t,e,i,r){!function(t,e,i){s.stat(t,((t,s)=>t?i(t):h(e,s.atime,s.mtime,i)))}(e,i,(e=>e?r(e):f(i,t,r)))}function f(t,e,i){return s.chmod(t,e,i)}function m(t,e,i,r){s.readdir(t,((s,n)=>s?r(s):g(n,t,e,i,r)))}function g(t,e,i,s,n){const o=t.pop();return o?function(t,e,i,s,n,o){const h=r.join(i,e),c=r.join(s,e);l.checkPaths(h,c,"copy",n,((e,r)=>{if(e)return o(e);const{destStat:l}=r;!function(t,e,i,s,r){s.filter?a(u,t,e,i,s,r):u(t,e,i,s,r)}(l,h,c,n,(e=>e?o(e):g(t,i,s,n,o)))}))}(t,o,e,i,s,n):n()}t.exports=function(t,e,i,s){"function"!=typeof i||s?"function"==typeof i&&(i={filter:i}):(s=i,i={}),s=s||function(){},(i=i||{}).clobber=!("clobber"in i)||!!i.clobber,i.overwrite="overwrite"in i?!!i.overwrite:i.clobber,i.preserveTimestamps&&"ia32"===process.arch&&process.emitWarning("Using the preserveTimestamps option in 32-bit node is not recommended;\n\n\tsee https://github.com/jprichardson/node-fs-extra/issues/269","Warning","fs-extra-WARN0001"),l.checkPaths(t,e,"copy",i,((r,n)=>{if(r)return s(r);const{srcStat:o,destStat:h}=n;l.checkParentPaths(t,o,e,"copy",(r=>r?s(r):i.filter?a(c,h,t,e,i,s):c(h,t,e,i,s)))}))}},7161:(t,e,i)=>{"use strict";const s=i(9962).fromCallback;t.exports={copy:s(i(1813)),copySync:i(6563)}},317:(t,e,i)=>{"use strict";const s=i(9962).fromPromise,r=i(8599),n=i(1017),o=i(8637),h=i(8973),l=s((async function(t){let e;try{e=await r.readdir(t)}catch{return o.mkdirs(t)}return Promise.all(e.map((e=>h.remove(n.join(t,e)))))}));function c(t){let e;try{e=r.readdirSync(t)}catch{return o.mkdirsSync(t)}e.forEach((e=>{e=n.join(t,e),h.removeSync(e)}))}t.exports={emptyDirSync:c,emptydirSync:c,emptyDir:l,emptydir:l}},1331:(t,e,i)=>{"use strict";const s=i(9962).fromCallback,r=i(1017),n=i(9370),o=i(8637);t.exports={createFile:s((function(t,e){function i(){n.writeFile(t,"",(t=>{if(t)return e(t);e()}))}n.stat(t,((s,h)=>{if(!s&&h.isFile())return e();const l=r.dirname(t);n.stat(l,((t,s)=>{if(t)return"ENOENT"===t.code?o.mkdirs(l,(t=>{if(t)return e(t);i()})):e(t);s.isDirectory()?i():n.readdir(l,(t=>{if(t)return e(t)}))}))}))})),createFileSync:function(t){let e;try{e=n.statSync(t)}catch{}if(e&&e.isFile())return;const i=r.dirname(t);try{n.statSync(i).isDirectory()||n.readdirSync(i)}catch(t){if(!t||"ENOENT"!==t.code)throw t;o.mkdirsSync(i)}n.writeFileSync(t,"")}}},2850:(t,e,i)=>{"use strict";const{createFile:s,createFileSync:r}=i(1331),{createLink:n,createLinkSync:o}=i(6250),{createSymlink:h,createSymlinkSync:l}=i(3264);t.exports={createFile:s,createFileSync:r,ensureFile:s,ensureFileSync:r,createLink:n,createLinkSync:o,ensureLink:n,ensureLinkSync:o,createSymlink:h,createSymlinkSync:l,ensureSymlink:h,ensureSymlinkSync:l}},6250:(t,e,i)=>{"use strict";const s=i(9962).fromCallback,r=i(1017),n=i(9370),o=i(8637),h=i(6832).pathExists,{areIdentical:l}=i(1901);t.exports={createLink:s((function(t,e,i){function s(t,e){n.link(t,e,(t=>{if(t)return i(t);i(null)}))}n.lstat(e,((c,a)=>{n.lstat(t,((n,c)=>{if(n)return n.message=n.message.replace("lstat","ensureLink"),i(n);if(a&&l(c,a))return i(null);const u=r.dirname(e);h(u,((r,n)=>r?i(r):n?s(t,e):void o.mkdirs(u,(r=>{if(r)return i(r);s(t,e)}))))}))}))})),createLinkSync:function(t,e){let i;try{i=n.lstatSync(e)}catch{}try{const e=n.lstatSync(t);if(i&&l(e,i))return}catch(t){throw t.message=t.message.replace("lstat","ensureLink"),t}const s=r.dirname(e);return n.existsSync(s)||o.mkdirsSync(s),n.linkSync(t,e)}}},4331:(t,e,i)=>{"use strict";const s=i(1017),r=i(9370),n=i(6832).pathExists;t.exports={symlinkPaths:function(t,e,i){if(s.isAbsolute(t))return r.lstat(t,(e=>e?(e.message=e.message.replace("lstat","ensureSymlink"),i(e)):i(null,{toCwd:t,toDst:t})));{const o=s.dirname(e),h=s.join(o,t);return n(h,((e,n)=>e?i(e):n?i(null,{toCwd:h,toDst:t}):r.lstat(t,(e=>e?(e.message=e.message.replace("lstat","ensureSymlink"),i(e)):i(null,{toCwd:t,toDst:s.relative(o,t)})))))}},symlinkPathsSync:function(t,e){let i;if(s.isAbsolute(t)){if(i=r.existsSync(t),!i)throw new Error("absolute srcpath does not exist");return{toCwd:t,toDst:t}}{const n=s.dirname(e),o=s.join(n,t);if(i=r.existsSync(o),i)return{toCwd:o,toDst:t};if(i=r.existsSync(t),!i)throw new Error("relative srcpath does not exist");return{toCwd:t,toDst:s.relative(n,t)}}}}},7328:(t,e,i)=>{"use strict";const s=i(9370);t.exports={symlinkType:function(t,e,i){if(i="function"==typeof e?e:i,e="function"!=typeof e&&e)return i(null,e);s.lstat(t,((t,s)=>{if(t)return i(null,"file");e=s&&s.isDirectory()?"dir":"file",i(null,e)}))},symlinkTypeSync:function(t,e){let i;if(e)return e;try{i=s.lstatSync(t)}catch{return"file"}return i&&i.isDirectory()?"dir":"file"}}},3264:(t,e,i)=>{"use strict";const s=i(9962).fromCallback,r=i(1017),n=i(8599),o=i(8637),h=o.mkdirs,l=o.mkdirsSync,c=i(4331),a=c.symlinkPaths,u=c.symlinkPathsSync,d=i(7328),p=d.symlinkType,f=d.symlinkTypeSync,m=i(6832).pathExists,{areIdentical:g}=i(1901);function y(t,e,i,s){a(t,e,((o,l)=>{if(o)return s(o);t=l.toDst,p(l.toCwd,i,((i,o)=>{if(i)return s(i);const l=r.dirname(e);m(l,((i,r)=>i?s(i):r?n.symlink(t,e,o,s):void h(l,(i=>{if(i)return s(i);n.symlink(t,e,o,s)}))))}))}))}t.exports={createSymlink:s((function(t,e,i,s){s="function"==typeof i?i:s,i="function"!=typeof i&&i,n.lstat(e,((r,o)=>{!r&&o.isSymbolicLink()?Promise.all([n.stat(t),n.stat(e)]).then((([r,n])=>{if(g(r,n))return s(null);y(t,e,i,s)})):y(t,e,i,s)}))})),createSymlinkSync:function(t,e,i){let s;try{s=n.lstatSync(e)}catch{}if(s&&s.isSymbolicLink()){const i=n.statSync(t),s=n.statSync(e);if(g(i,s))return}const o=u(t,e);t=o.toDst,i=f(o.toCwd,i);const h=r.dirname(e);return n.existsSync(h)||l(h),n.symlinkSync(t,e,i)}}},8599:(t,e,i)=>{"use strict";const s=i(9962).fromCallback,r=i(9370),n=["access","appendFile","chmod","chown","close","copyFile","fchmod","fchown","fdatasync","fstat","fsync","ftruncate","futimes","lchmod","lchown","link","lstat","mkdir","mkdtemp","open","opendir","readdir","readFile","readlink","realpath","rename","rm","rmdir","stat","symlink","truncate","unlink","utimes","writeFile"].filter((t=>"function"==typeof r[t]));Object.assign(e,r),n.forEach((t=>{e[t]=s(r[t])})),e.exists=function(t,e){return"function"==typeof e?r.exists(t,e):new Promise((e=>r.exists(t,e)))},e.read=function(t,e,i,s,n,o){return"function"==typeof o?r.read(t,e,i,s,n,o):new Promise(((o,h)=>{r.read(t,e,i,s,n,((t,e,i)=>{if(t)return h(t);o({bytesRead:e,buffer:i})}))}))},e.write=function(t,e,...i){return"function"==typeof i[i.length-1]?r.write(t,e,...i):new Promise(((s,n)=>{r.write(t,e,...i,((t,e,i)=>{if(t)return n(t);s({bytesWritten:e,buffer:i})}))}))},"function"==typeof r.writev&&(e.writev=function(t,e,...i){return"function"==typeof i[i.length-1]?r.writev(t,e,...i):new Promise(((s,n)=>{r.writev(t,e,...i,((t,e,i)=>{if(t)return n(t);s({bytesWritten:e,buffers:i})}))}))}),"function"==typeof r.realpath.native?e.realpath.native=s(r.realpath.native):process.emitWarning("fs.realpath.native is not a function. Is fs being monkey-patched?","Warning","fs-extra-WARN0003")},8238:(t,e,i)=>{"use strict";t.exports={...i(8599),...i(7161),...i(317),...i(2850),...i(4978),...i(8637),...i(3501),...i(8822),...i(6832),...i(8973)}},4978:(t,e,i)=>{"use strict";const s=i(9962).fromPromise,r=i(3393);r.outputJson=s(i(9566)),r.outputJsonSync=i(7320),r.outputJSON=r.outputJson,r.outputJSONSync=r.outputJsonSync,r.writeJSON=r.writeJson,r.writeJSONSync=r.writeJsonSync,r.readJSON=r.readJson,r.readJSONSync=r.readJsonSync,t.exports=r},3393:(t,e,i)=>{"use strict";const s=i(4071);t.exports={readJson:s.readFile,readJsonSync:s.readFileSync,writeJson:s.writeFile,writeJsonSync:s.writeFileSync}},7320:(t,e,i)=>{"use strict";const{stringify:s}=i(2965),{outputFileSync:r}=i(8822);t.exports=function(t,e,i){const n=s(e,i);r(t,n,i)}},9566:(t,e,i)=>{"use strict";const{stringify:s}=i(2965),{outputFile:r}=i(8822);t.exports=async function(t,e,i={}){const n=s(e,i);await r(t,n,i)}},8637:(t,e,i)=>{"use strict";const s=i(9962).fromPromise,{makeDir:r,makeDirSync:n}=i(4112),o=s(r);t.exports={mkdirs:o,mkdirsSync:n,mkdirp:o,mkdirpSync:n,ensureDir:o,ensureDirSync:n}},4112:(t,e,i)=>{"use strict";const s=i(8599),{checkPath:r}=i(7687),n=t=>"number"==typeof t?t:{mode:511,...t}.mode;t.exports.makeDir=async(t,e)=>(r(t),s.mkdir(t,{mode:n(e),recursive:!0})),t.exports.makeDirSync=(t,e)=>(r(t),s.mkdirSync(t,{mode:n(e),recursive:!0}))},7687:(t,e,i)=>{"use strict";const s=i(1017);t.exports.checkPath=function(t){if("win32"===process.platform&&/[<>:"|?*]/.test(t.replace(s.parse(t).root,""))){const e=new Error(`Path contains invalid characters: ${t}`);throw e.code="EINVAL",e}}},3501:(t,e,i)=>{"use strict";const s=i(9962).fromCallback;t.exports={move:s(i(5933)),moveSync:i(59)}},59:(t,e,i)=>{"use strict";const s=i(9370),r=i(1017),n=i(7161).copySync,o=i(8973).removeSync,h=i(8637).mkdirpSync,l=i(1901);function c(t,e,i){try{s.renameSync(t,e)}catch(s){if("EXDEV"!==s.code)throw s;return function(t,e,i){return n(t,e,{overwrite:i,errorOnExist:!0}),o(t)}(t,e,i)}}t.exports=function(t,e,i){const n=(i=i||{}).overwrite||i.clobber||!1,{srcStat:a,isChangingCase:u=!1}=l.checkPathsSync(t,e,"move",i);return l.checkParentPathsSync(t,a,e,"move"),function(t){const e=r.dirname(t);return r.parse(e).root===e}(e)||h(r.dirname(e)),function(t,e,i,r){if(r)return c(t,e,i);if(i)return o(e),c(t,e,i);if(s.existsSync(e))throw new Error("dest already exists.");return c(t,e,i)}(t,e,n,u)}},5933:(t,e,i)=>{"use strict";const s=i(9370),r=i(1017),n=i(7161).copy,o=i(8973).remove,h=i(8637).mkdirp,l=i(6832).pathExists,c=i(1901);function a(t,e,i,s,r){return s?u(t,e,i,r):i?o(e,(s=>s?r(s):u(t,e,i,r))):void l(e,((s,n)=>s?r(s):n?r(new Error("dest already exists.")):u(t,e,i,r)))}function u(t,e,i,r){s.rename(t,e,(s=>s?"EXDEV"!==s.code?r(s):function(t,e,i,s){n(t,e,{overwrite:i,errorOnExist:!0},(e=>e?s(e):o(t,s)))}(t,e,i,r):r()))}t.exports=function(t,e,i,s){"function"==typeof i&&(s=i,i={});const n=(i=i||{}).overwrite||i.clobber||!1;c.checkPaths(t,e,"move",i,((i,o)=>{if(i)return s(i);const{srcStat:l,isChangingCase:u=!1}=o;c.checkParentPaths(t,l,e,"move",(i=>i?s(i):function(t){const e=r.dirname(t);return r.parse(e).root===e}(e)?a(t,e,n,u,s):void h(r.dirname(e),(i=>i?s(i):a(t,e,n,u,s)))))}))}},8822:(t,e,i)=>{"use strict";const s=i(9962).fromCallback,r=i(9370),n=i(1017),o=i(8637),h=i(6832).pathExists;t.exports={outputFile:s((function(t,e,i,s){"function"==typeof i&&(s=i,i="utf8");const l=n.dirname(t);h(l,((n,h)=>n?s(n):h?r.writeFile(t,e,i,s):void o.mkdirs(l,(n=>{if(n)return s(n);r.writeFile(t,e,i,s)}))))})),outputFileSync:function(t,...e){const i=n.dirname(t);if(r.existsSync(i))return r.writeFileSync(t,...e);o.mkdirsSync(i),r.writeFileSync(t,...e)}}},6832:(t,e,i)=>{"use strict";const s=i(9962).fromPromise,r=i(8599);t.exports={pathExists:s((function(t){return r.access(t).then((()=>!0)).catch((()=>!1))})),pathExistsSync:r.existsSync}},8973:(t,e,i)=>{"use strict";const s=i(9370),r=i(9962).fromCallback,n=i(5021);t.exports={remove:r((function(t,e){if(s.rm)return s.rm(t,{recursive:!0,force:!0},e);n(t,e)})),removeSync:function(t){if(s.rmSync)return s.rmSync(t,{recursive:!0,force:!0});n.sync(t)}}},5021:(t,e,i)=>{"use strict";const s=i(9370),r=i(1017),n=i(9491),o="win32"===process.platform;function h(t){["unlink","chmod","stat","lstat","rmdir","readdir"].forEach((e=>{t[e]=t[e]||s[e],t[e+="Sync"]=t[e]||s[e]})),t.maxBusyTries=t.maxBusyTries||3}function l(t,e,i){let s=0;"function"==typeof e&&(i=e,e={}),n(t,"rimraf: missing path"),n.strictEqual(typeof t,"string","rimraf: path should be a string"),n.strictEqual(typeof i,"function","rimraf: callback function required"),n(e,"rimraf: invalid options argument provided"),n.strictEqual(typeof e,"object","rimraf: options should be object"),h(e),c(t,e,(function r(n){if(n){if(("EBUSY"===n.code||"ENOTEMPTY"===n.code||"EPERM"===n.code)&&s<e.maxBusyTries)return s++,setTimeout((()=>c(t,e,r)),100*s);"ENOENT"===n.code&&(n=null)}i(n)}))}function c(t,e,i){n(t),n(e),n("function"==typeof i),e.lstat(t,((s,r)=>s&&"ENOENT"===s.code?i(null):s&&"EPERM"===s.code&&o?a(t,e,s,i):r&&r.isDirectory()?d(t,e,s,i):void e.unlink(t,(s=>{if(s){if("ENOENT"===s.code)return i(null);if("EPERM"===s.code)return o?a(t,e,s,i):d(t,e,s,i);if("EISDIR"===s.code)return d(t,e,s,i)}return i(s)}))))}function a(t,e,i,s){n(t),n(e),n("function"==typeof s),e.chmod(t,438,(r=>{r?s("ENOENT"===r.code?null:i):e.stat(t,((r,n)=>{r?s("ENOENT"===r.code?null:i):n.isDirectory()?d(t,e,i,s):e.unlink(t,s)}))}))}function u(t,e,i){let s;n(t),n(e);try{e.chmodSync(t,438)}catch(t){if("ENOENT"===t.code)return;throw i}try{s=e.statSync(t)}catch(t){if("ENOENT"===t.code)return;throw i}s.isDirectory()?f(t,e,i):e.unlinkSync(t)}function d(t,e,i,s){n(t),n(e),n("function"==typeof s),e.rmdir(t,(o=>{!o||"ENOTEMPTY"!==o.code&&"EEXIST"!==o.code&&"EPERM"!==o.code?o&&"ENOTDIR"===o.code?s(i):s(o):function(t,e,i){n(t),n(e),n("function"==typeof i),e.readdir(t,((s,n)=>{if(s)return i(s);let o,h=n.length;if(0===h)return e.rmdir(t,i);n.forEach((s=>{l(r.join(t,s),e,(s=>{if(!o)return s?i(o=s):void(0==--h&&e.rmdir(t,i))}))}))}))}(t,e,s)}))}function p(t,e){let i;h(e=e||{}),n(t,"rimraf: missing path"),n.strictEqual(typeof t,"string","rimraf: path should be a string"),n(e,"rimraf: missing options"),n.strictEqual(typeof e,"object","rimraf: options should be object");try{i=e.lstatSync(t)}catch(i){if("ENOENT"===i.code)return;"EPERM"===i.code&&o&&u(t,e,i)}try{i&&i.isDirectory()?f(t,e,null):e.unlinkSync(t)}catch(i){if("ENOENT"===i.code)return;if("EPERM"===i.code)return o?u(t,e,i):f(t,e,i);if("EISDIR"!==i.code)throw i;f(t,e,i)}}function f(t,e,i){n(t),n(e);try{e.rmdirSync(t)}catch(s){if("ENOTDIR"===s.code)throw i;if("ENOTEMPTY"===s.code||"EEXIST"===s.code||"EPERM"===s.code)!function(t,e){if(n(t),n(e),e.readdirSync(t).forEach((i=>p(r.join(t,i),e))),!o)return e.rmdirSync(t,e);{const i=Date.now();do{try{return e.rmdirSync(t,e)}catch{}}while(Date.now()-i<500)}}(t,e);else if("ENOENT"!==s.code)throw s}}t.exports=l,l.sync=p},1901:(t,e,i)=>{"use strict";const s=i(8599),r=i(1017),n=i(3837);function o(t,e,i){const r=i.dereference?t=>s.stat(t,{bigint:!0}):t=>s.lstat(t,{bigint:!0});return Promise.all([r(t),r(e).catch((t=>{if("ENOENT"===t.code)return null;throw t}))]).then((([t,e])=>({srcStat:t,destStat:e})))}function h(t,e){return e.ino&&e.dev&&e.ino===t.ino&&e.dev===t.dev}function l(t,e){const i=r.resolve(t).split(r.sep).filter((t=>t)),s=r.resolve(e).split(r.sep).filter((t=>t));return i.reduce(((t,e,i)=>t&&s[i]===e),!0)}function c(t,e,i){return`Cannot ${i} '${t}' to a subdirectory of itself, '${e}'.`}t.exports={checkPaths:function(t,e,i,s,a){n.callbackify(o)(t,e,s,((s,n)=>{if(s)return a(s);const{srcStat:o,destStat:u}=n;if(u){if(h(o,u)){const s=r.basename(t),n=r.basename(e);return"move"===i&&s!==n&&s.toLowerCase()===n.toLowerCase()?a(null,{srcStat:o,destStat:u,isChangingCase:!0}):a(new Error("Source and destination must not be the same."))}if(o.isDirectory()&&!u.isDirectory())return a(new Error(`Cannot overwrite non-directory '${e}' with directory '${t}'.`));if(!o.isDirectory()&&u.isDirectory())return a(new Error(`Cannot overwrite directory '${e}' with non-directory '${t}'.`))}return o.isDirectory()&&l(t,e)?a(new Error(c(t,e,i))):a(null,{srcStat:o,destStat:u})}))},checkPathsSync:function(t,e,i,n){const{srcStat:o,destStat:a}=function(t,e,i){let r;const n=i.dereference?t=>s.statSync(t,{bigint:!0}):t=>s.lstatSync(t,{bigint:!0}),o=n(t);try{r=n(e)}catch(t){if("ENOENT"===t.code)return{srcStat:o,destStat:null};throw t}return{srcStat:o,destStat:r}}(t,e,n);if(a){if(h(o,a)){const s=r.basename(t),n=r.basename(e);if("move"===i&&s!==n&&s.toLowerCase()===n.toLowerCase())return{srcStat:o,destStat:a,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(o.isDirectory()&&!a.isDirectory())throw new Error(`Cannot overwrite non-directory '${e}' with directory '${t}'.`);if(!o.isDirectory()&&a.isDirectory())throw new Error(`Cannot overwrite directory '${e}' with non-directory '${t}'.`)}if(o.isDirectory()&&l(t,e))throw new Error(c(t,e,i));return{srcStat:o,destStat:a}},checkParentPaths:function t(e,i,n,o,l){const a=r.resolve(r.dirname(e)),u=r.resolve(r.dirname(n));if(u===a||u===r.parse(u).root)return l();s.stat(u,{bigint:!0},((s,r)=>s?"ENOENT"===s.code?l():l(s):h(i,r)?l(new Error(c(e,n,o))):t(e,i,u,o,l)))},checkParentPathsSync:function t(e,i,n,o){const l=r.resolve(r.dirname(e)),a=r.resolve(r.dirname(n));if(a===l||a===r.parse(a).root)return;let u;try{u=s.statSync(a,{bigint:!0})}catch(t){if("ENOENT"===t.code)return;throw t}if(h(i,u))throw new Error(c(e,n,o));return t(e,i,a,o)},isSrcSubdir:l,areIdentical:h}},9683:(t,e,i)=>{"use strict";const s=i(9370);t.exports={utimesMillis:function(t,e,i,r){s.open(t,"r+",((t,n)=>{if(t)return r(t);s.futimes(n,e,i,(t=>{s.close(n,(e=>{r&&r(t||e)}))}))}))},utimesMillisSync:function(t,e,i){const r=s.openSync(t,"r+");return s.futimesSync(r,e,i),s.closeSync(r)}}},4111:t=>{"use strict";t.exports=function(t){if(null===t||"object"!=typeof t)return t;if(t instanceof Object)var i={__proto__:e(t)};else i=Object.create(null);return Object.getOwnPropertyNames(t).forEach((function(e){Object.defineProperty(i,e,Object.getOwnPropertyDescriptor(t,e))})),i};var e=Object.getPrototypeOf||function(t){return t.__proto__}},9370:(t,e,i)=>{var s,r,n=i(7147),o=i(9115),h=i(3340),l=i(4111),c=i(3837);function a(t,e){Object.defineProperty(t,s,{get:function(){return e}})}"function"==typeof Symbol&&"function"==typeof Symbol.for?(s=Symbol.for("graceful-fs.queue"),r=Symbol.for("graceful-fs.previous")):(s="___graceful-fs.queue",r="___graceful-fs.previous");var u,d=function(){};if(c.debuglog?d=c.debuglog("gfs4"):/\bgfs4\b/i.test(process.env.NODE_DEBUG||"")&&(d=function(){var t=c.format.apply(c,arguments);t="GFS4: "+t.split(/\n/).join("\nGFS4: "),console.error(t)}),!n[s]){var p=global[s]||[];a(n,p),n.close=function(t){function e(e,i){return t.call(n,e,(function(t){t||g(),"function"==typeof i&&i.apply(this,arguments)}))}return Object.defineProperty(e,r,{value:t}),e}(n.close),n.closeSync=function(t){function e(e){t.apply(n,arguments),g()}return Object.defineProperty(e,r,{value:t}),e}(n.closeSync),/\bgfs4\b/i.test(process.env.NODE_DEBUG||"")&&process.on("exit",(function(){d(n[s]),i(9491).equal(n[s].length,0)}))}function f(t){o(t),t.gracefulify=f,t.createReadStream=function(e,i){return new t.ReadStream(e,i)},t.createWriteStream=function(e,i){return new t.WriteStream(e,i)};var e=t.readFile;t.readFile=function(t,i,s){return"function"==typeof i&&(s=i,i=null),function t(i,s,r,n){return e(i,s,(function(e){!e||"EMFILE"!==e.code&&"ENFILE"!==e.code?"function"==typeof r&&r.apply(this,arguments):m([t,[i,s,r],e,n||Date.now(),Date.now()])}))}(t,i,s)};var i=t.writeFile;t.writeFile=function(t,e,s,r){return"function"==typeof s&&(r=s,s=null),function t(e,s,r,n,o){return i(e,s,r,(function(i){!i||"EMFILE"!==i.code&&"ENFILE"!==i.code?"function"==typeof n&&n.apply(this,arguments):m([t,[e,s,r,n],i,o||Date.now(),Date.now()])}))}(t,e,s,r)};var s=t.appendFile;s&&(t.appendFile=function(t,e,i,r){return"function"==typeof i&&(r=i,i=null),function t(e,i,r,n,o){return s(e,i,r,(function(s){!s||"EMFILE"!==s.code&&"ENFILE"!==s.code?"function"==typeof n&&n.apply(this,arguments):m([t,[e,i,r,n],s,o||Date.now(),Date.now()])}))}(t,e,i,r)});var r=t.copyFile;r&&(t.copyFile=function(t,e,i,s){return"function"==typeof i&&(s=i,i=0),function t(e,i,s,n,o){return r(e,i,s,(function(r){!r||"EMFILE"!==r.code&&"ENFILE"!==r.code?"function"==typeof n&&n.apply(this,arguments):m([t,[e,i,s,n],r,o||Date.now(),Date.now()])}))}(t,e,i,s)});var n=t.readdir;t.readdir=function(t,e,i){"function"==typeof e&&(i=e,e=null);var s=l.test(process.version)?function(t,e,i,s){return n(t,r(t,e,i,s))}:function(t,e,i,s){return n(t,e,r(t,e,i,s))};return s(t,e,i);function r(t,e,i,r){return function(n,o){!n||"EMFILE"!==n.code&&"ENFILE"!==n.code?(o&&o.sort&&o.sort(),"function"==typeof i&&i.call(this,n,o)):m([s,[t,e,i],n,r||Date.now(),Date.now()])}}};var l=/^v[0-5]\./;if("v0.8"===process.version.substr(0,4)){var c=h(t);g=c.ReadStream,y=c.WriteStream}var a=t.ReadStream;a&&(g.prototype=Object.create(a.prototype),g.prototype.open=function(){var t=this;b(t.path,t.flags,t.mode,(function(e,i){e?(t.autoClose&&t.destroy(),t.emit("error",e)):(t.fd=i,t.emit("open",i),t.read())}))});var u=t.WriteStream;u&&(y.prototype=Object.create(u.prototype),y.prototype.open=function(){var t=this;b(t.path,t.flags,t.mode,(function(e,i){e?(t.destroy(),t.emit("error",e)):(t.fd=i,t.emit("open",i))}))}),Object.defineProperty(t,"ReadStream",{get:function(){return g},set:function(t){g=t},enumerable:!0,configurable:!0}),Object.defineProperty(t,"WriteStream",{get:function(){return y},set:function(t){y=t},enumerable:!0,configurable:!0});var d=g;Object.defineProperty(t,"FileReadStream",{get:function(){return d},set:function(t){d=t},enumerable:!0,configurable:!0});var p=y;function g(t,e){return this instanceof g?(a.apply(this,arguments),this):g.apply(Object.create(g.prototype),arguments)}function y(t,e){return this instanceof y?(u.apply(this,arguments),this):y.apply(Object.create(y.prototype),arguments)}Object.defineProperty(t,"FileWriteStream",{get:function(){return p},set:function(t){p=t},enumerable:!0,configurable:!0});var v=t.open;function b(t,e,i,s){return"function"==typeof i&&(s=i,i=null),function t(e,i,s,r,n){return v(e,i,s,(function(o,h){!o||"EMFILE"!==o.code&&"ENFILE"!==o.code?"function"==typeof r&&r.apply(this,arguments):m([t,[e,i,s,r],o,n||Date.now(),Date.now()])}))}(t,e,i,s)}return t.open=b,t}function m(t){d("ENQUEUE",t[0].name,t[1]),n[s].push(t),y()}function g(){for(var t=Date.now(),e=0;e<n[s].length;++e)n[s][e].length>2&&(n[s][e][3]=t,n[s][e][4]=t);y()}function y(){if(clearTimeout(u),u=void 0,0!==n[s].length){var t=n[s].shift(),e=t[0],i=t[1],r=t[2],o=t[3],h=t[4];if(void 0===o)d("RETRY",e.name,i),e.apply(null,i);else if(Date.now()-o>=6e4){d("TIMEOUT",e.name,i);var l=i.pop();"function"==typeof l&&l.call(null,r)}else{var c=Date.now()-h,a=Math.max(h-o,1);c>=Math.min(1.2*a,100)?(d("RETRY",e.name,i),e.apply(null,i.concat([o]))):n[s].push(t)}void 0===u&&(u=setTimeout(y,0))}}global[s]||a(global,n[s]),t.exports=f(l(n)),process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH&&!n.__patched&&(t.exports=f(n),n.__patched=!0)},3340:(t,e,i)=>{var s=i(2781).Stream;t.exports=function(t){return{ReadStream:function e(i,r){if(!(this instanceof e))return new e(i,r);s.call(this);var n=this;this.path=i,this.fd=null,this.readable=!0,this.paused=!1,this.flags="r",this.mode=438,this.bufferSize=65536,r=r||{};for(var o=Object.keys(r),h=0,l=o.length;h<l;h++){var c=o[h];this[c]=r[c]}if(this.encoding&&this.setEncoding(this.encoding),void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(void 0===this.end)this.end=1/0;else if("number"!=typeof this.end)throw TypeError("end must be a Number");if(this.start>this.end)throw new Error("start must be <= end");this.pos=this.start}null===this.fd?t.open(this.path,this.flags,this.mode,(function(t,e){if(t)return n.emit("error",t),void(n.readable=!1);n.fd=e,n.emit("open",e),n._read()})):process.nextTick((function(){n._read()}))},WriteStream:function e(i,r){if(!(this instanceof e))return new e(i,r);s.call(this),this.path=i,this.fd=null,this.writable=!0,this.flags="w",this.encoding="binary",this.mode=438,this.bytesWritten=0,r=r||{};for(var n=Object.keys(r),o=0,h=n.length;o<h;o++){var l=n[o];this[l]=r[l]}if(void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(this.start<0)throw new Error("start must be >= zero");this.pos=this.start}this.busy=!1,this._queue=[],null===this.fd&&(this._open=t.open,this._queue.push([this._open,this.path,this.flags,this.mode,void 0]),this.flush())}}}},9115:(t,e,i)=>{var s=i(2057),r=process.cwd,n=null,o=process.env.GRACEFUL_FS_PLATFORM||process.platform;process.cwd=function(){return n||(n=r.call(process)),n};try{process.cwd()}catch(t){}if("function"==typeof process.chdir){var h=process.chdir;process.chdir=function(t){n=null,h.call(process,t)},Object.setPrototypeOf&&Object.setPrototypeOf(process.chdir,h)}t.exports=function(t){function e(e){return e?function(i,s,r){return e.call(t,i,s,(function(t){c(t)&&(t=null),r&&r.apply(this,arguments)}))}:e}function i(e){return e?function(i,s){try{return e.call(t,i,s)}catch(t){if(!c(t))throw t}}:e}function r(e){return e?function(i,s,r,n){return e.call(t,i,s,r,(function(t){c(t)&&(t=null),n&&n.apply(this,arguments)}))}:e}function n(e){return e?function(i,s,r){try{return e.call(t,i,s,r)}catch(t){if(!c(t))throw t}}:e}function h(e){return e?function(i,s,r){function n(t,e){e&&(e.uid<0&&(e.uid+=4294967296),e.gid<0&&(e.gid+=4294967296)),r&&r.apply(this,arguments)}return"function"==typeof s&&(r=s,s=null),s?e.call(t,i,s,n):e.call(t,i,n)}:e}function l(e){return e?function(i,s){var r=s?e.call(t,i,s):e.call(t,i);return r&&(r.uid<0&&(r.uid+=4294967296),r.gid<0&&(r.gid+=4294967296)),r}:e}function c(t){return!t||"ENOSYS"===t.code||!(process.getuid&&0===process.getuid()||"EINVAL"!==t.code&&"EPERM"!==t.code)}var a;s.hasOwnProperty("O_SYMLINK")&&process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)&&function(t){t.lchmod=function(e,i,r){t.open(e,s.O_WRONLY|s.O_SYMLINK,i,(function(e,s){e?r&&r(e):t.fchmod(s,i,(function(e){t.close(s,(function(t){r&&r(e||t)}))}))}))},t.lchmodSync=function(e,i){var r,n=t.openSync(e,s.O_WRONLY|s.O_SYMLINK,i),o=!0;try{r=t.fchmodSync(n,i),o=!1}finally{if(o)try{t.closeSync(n)}catch(t){}else t.closeSync(n)}return r}}(t),t.lutimes||function(t){s.hasOwnProperty("O_SYMLINK")&&t.futimes?(t.lutimes=function(e,i,r,n){t.open(e,s.O_SYMLINK,(function(e,s){e?n&&n(e):t.futimes(s,i,r,(function(e){t.close(s,(function(t){n&&n(e||t)}))}))}))},t.lutimesSync=function(e,i,r){var n,o=t.openSync(e,s.O_SYMLINK),h=!0;try{n=t.futimesSync(o,i,r),h=!1}finally{if(h)try{t.closeSync(o)}catch(t){}else t.closeSync(o)}return n}):t.futimes&&(t.lutimes=function(t,e,i,s){s&&process.nextTick(s)},t.lutimesSync=function(){})}(t),t.chown=r(t.chown),t.fchown=r(t.fchown),t.lchown=r(t.lchown),t.chmod=e(t.chmod),t.fchmod=e(t.fchmod),t.lchmod=e(t.lchmod),t.chownSync=n(t.chownSync),t.fchownSync=n(t.fchownSync),t.lchownSync=n(t.lchownSync),t.chmodSync=i(t.chmodSync),t.fchmodSync=i(t.fchmodSync),t.lchmodSync=i(t.lchmodSync),t.stat=h(t.stat),t.fstat=h(t.fstat),t.lstat=h(t.lstat),t.statSync=l(t.statSync),t.fstatSync=l(t.fstatSync),t.lstatSync=l(t.lstatSync),t.chmod&&!t.lchmod&&(t.lchmod=function(t,e,i){i&&process.nextTick(i)},t.lchmodSync=function(){}),t.chown&&!t.lchown&&(t.lchown=function(t,e,i,s){s&&process.nextTick(s)},t.lchownSync=function(){}),"win32"===o&&(t.rename="function"!=typeof t.rename?t.rename:function(e){function i(i,s,r){var n=Date.now(),o=0;e(i,s,(function h(l){if(l&&("EACCES"===l.code||"EPERM"===l.code)&&Date.now()-n<6e4)return setTimeout((function(){t.stat(s,(function(t,n){t&&"ENOENT"===t.code?e(i,s,h):r(l)}))}),o),void(o<100&&(o+=10));r&&r(l)}))}return Object.setPrototypeOf&&Object.setPrototypeOf(i,e),i}(t.rename)),t.read="function"!=typeof t.read?t.read:function(e){function i(i,s,r,n,o,h){var l;if(h&&"function"==typeof h){var c=0;l=function(a,u,d){if(a&&"EAGAIN"===a.code&&c<10)return c++,e.call(t,i,s,r,n,o,l);h.apply(this,arguments)}}return e.call(t,i,s,r,n,o,l)}return Object.setPrototypeOf&&Object.setPrototypeOf(i,e),i}(t.read),t.readSync="function"!=typeof t.readSync?t.readSync:(a=t.readSync,function(e,i,s,r,n){for(var o=0;;)try{return a.call(t,e,i,s,r,n)}catch(t){if("EAGAIN"===t.code&&o<10){o++;continue}throw t}})}},4071:(t,e,i)=>{let s;try{s=i(9370)}catch(t){s=i(7147)}const r=i(9962),{stringify:n,stripBom:o}=i(2965),h={readFile:r.fromPromise((async function(t,e={}){"string"==typeof e&&(e={encoding:e});const i=e.fs||s,n=!("throws"in e)||e.throws;let h,l=await r.fromCallback(i.readFile)(t,e);l=o(l);try{h=JSON.parse(l,e?e.reviver:null)}catch(e){if(n)throw e.message=`${t}: ${e.message}`,e;return null}return h})),readFileSync:function(t,e={}){"string"==typeof e&&(e={encoding:e});const i=e.fs||s,r=!("throws"in e)||e.throws;try{let s=i.readFileSync(t,e);return s=o(s),JSON.parse(s,e.reviver)}catch(e){if(r)throw e.message=`${t}: ${e.message}`,e;return null}},writeFile:r.fromPromise((async function(t,e,i={}){const o=i.fs||s,h=n(e,i);await r.fromCallback(o.writeFile)(t,h,i)})),writeFileSync:function(t,e,i={}){const r=i.fs||s,o=n(e,i);return r.writeFileSync(t,o,i)}};t.exports=h},2965:t=>{t.exports={stringify:function(t,{EOL:e="\n",finalEOL:i=!0,replacer:s=null,spaces:r}={}){const n=i?e:"";return JSON.stringify(t,s,r).replace(/\n/g,e)+n},stripBom:function(t){return Buffer.isBuffer(t)&&(t=t.toString("utf8")),t.replace(/^\uFEFF/,"")}}},2263:t=>{"use strict";const{FORCE_COLOR:e,NODE_DISABLE_COLORS:i,TERM:s}=process.env,r={enabled:!i&&"dumb"!==s&&"0"!==e,reset:o(0,0),bold:o(1,22),dim:o(2,22),italic:o(3,23),underline:o(4,24),inverse:o(7,27),hidden:o(8,28),strikethrough:o(9,29),black:o(30,39),red:o(31,39),green:o(32,39),yellow:o(33,39),blue:o(34,39),magenta:o(35,39),cyan:o(36,39),white:o(37,39),gray:o(90,39),grey:o(90,39),bgBlack:o(40,49),bgRed:o(41,49),bgGreen:o(42,49),bgYellow:o(43,49),bgBlue:o(44,49),bgMagenta:o(45,49),bgCyan:o(46,49),bgWhite:o(47,49)};function n(t,e){let i,s=0,r="",n="";for(;s<t.length;s++)i=t[s],r+=i.open,n+=i.close,e.includes(i.close)&&(e=e.replace(i.rgx,i.close+i.open));return r+e+n}function o(t,e){let i={open:`[${t}m`,close:`[${e}m`,rgx:new RegExp(`\\x1b\\[${e}m`,"g")};return function(e){return void 0!==this&&void 0!==this.has?(this.has.includes(t)||(this.has.push(t),this.keys.push(i)),void 0===e?this:r.enabled?n(this.keys,e+""):e+""):void 0===e?function(t,e){let i={has:t,keys:e};return i.reset=r.reset.bind(i),i.bold=r.bold.bind(i),i.dim=r.dim.bind(i),i.italic=r.italic.bind(i),i.underline=r.underline.bind(i),i.inverse=r.inverse.bind(i),i.hidden=r.hidden.bind(i),i.strikethrough=r.strikethrough.bind(i),i.black=r.black.bind(i),i.red=r.red.bind(i),i.green=r.green.bind(i),i.yellow=r.yellow.bind(i),i.blue=r.blue.bind(i),i.magenta=r.magenta.bind(i),i.cyan=r.cyan.bind(i),i.white=r.white.bind(i),i.gray=r.gray.bind(i),i.grey=r.grey.bind(i),i.bgBlack=r.bgBlack.bind(i),i.bgRed=r.bgRed.bind(i),i.bgGreen=r.bgGreen.bind(i),i.bgYellow=r.bgYellow.bind(i),i.bgBlue=r.bgBlue.bind(i),i.bgMagenta=r.bgMagenta.bind(i),i.bgCyan=r.bgCyan.bind(i),i.bgWhite=r.bgWhite.bind(i),i}([t],[i]):r.enabled?n([i],e+""):e+""}}t.exports=r},9381:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.link=e.ansi256Bg=e.ansi256=e.bgLightGray=e.bgLightCyan=e.bgLightMagenta=e.bgLightBlue=e.bgLightYellow=e.bgLightGreen=e.bgLightRed=e.bgGray=e.bgWhite=e.bgCyan=e.bgMagenta=e.bgBlue=e.bgYellow=e.bgGreen=e.bgRed=e.bgBlack=e.lightCyan=e.lightMagenta=e.lightBlue=e.lightYellow=e.lightGreen=e.lightRed=e.lightGray=e.gray=e.white=e.cyan=e.magenta=e.blue=e.yellow=e.green=e.red=e.black=e.strikethrough=e.hidden=e.inverse=e.underline=e.italic=e.dim=e.bold=e.reset=e.stripColors=e.options=void 0;let i=!0;const s="undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};let r=0;if(s.process&&s.process.env&&s.process.stdout){const{FORCE_COLOR:t,NODE_DISABLE_COLORS:e,TERM:n}=s.process.env;i=!e&&"0"!==t&&("1"===t||"dumb"!==n&&(!(!("CI"in s.process.env)||!["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE","DRONE"].some((t=>t in s.process.env)))||process.stdout.isTTY)),i&&(r=n&&n.endsWith("-256color")?2:1)}function n(t,i,s=1){const r=`[${t}m`,n=`[${i}m`,o=new RegExp(`\\x1b\\[${i}m`,"g");return t=>e.options.enabled&&e.options.supportLevel>=s?r+(""+t).replace(o,r)+n:""+t}e.options={enabled:i,supportLevel:r},e.stripColors=function(t){return(""+t).replace(/\x1b\[[0-9;]+m/g,"").replace(/\x1b\]8;;.*?\x07(.*?)\x1b\]8;;\x07/g,((t,e)=>e))},e.reset=n(0,0),e.bold=n(1,22),e.dim=n(2,22),e.italic=n(3,23),e.underline=n(4,24),e.inverse=n(7,27),e.hidden=n(8,28),e.strikethrough=n(9,29),e.black=n(30,39),e.red=n(31,39),e.green=n(32,39),e.yellow=n(33,39),e.blue=n(34,39),e.magenta=n(35,39),e.cyan=n(36,39),e.white=n(97,39),e.gray=n(90,39),e.lightGray=n(37,39),e.lightRed=n(91,39),e.lightGreen=n(92,39),e.lightYellow=n(93,39),e.lightBlue=n(94,39),e.lightMagenta=n(95,39),e.lightCyan=n(96,39),e.bgBlack=n(40,49),e.bgRed=n(41,49),e.bgGreen=n(42,49),e.bgYellow=n(43,49),e.bgBlue=n(44,49),e.bgMagenta=n(45,49),e.bgCyan=n(46,49),e.bgWhite=n(107,49),e.bgGray=n(100,49),e.bgLightRed=n(101,49),e.bgLightGreen=n(102,49),e.bgLightYellow=n(103,49),e.bgLightBlue=n(104,49),e.bgLightMagenta=n(105,49),e.bgLightCyan=n(106,49),e.bgLightGray=n(47,49),e.ansi256=t=>n("38;5;"+t,0,2),e.ansi256Bg=t=>n("48;5;"+t,0,2);e.link=function(t,i){return e.options.enabled?"]8;;"+i+""+t+"]8;;":`${t} (​${i}​)`}},5076:t=>{function e(t){return"number"==typeof t||!!/^0x[0-9a-f]+$/i.test(t)||/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(t)}function i(t,e){return"constructor"===e&&"function"==typeof t[e]||"__proto__"===e}t.exports=function(t,s){s||(s={});var r={bools:{},strings:{},unknownFn:null};"function"==typeof s.unknown&&(r.unknownFn=s.unknown),"boolean"==typeof s.boolean&&s.boolean?r.allBools=!0:[].concat(s.boolean).filter(Boolean).forEach((function(t){r.bools[t]=!0}));var n={};Object.keys(s.alias||{}).forEach((function(t){n[t]=[].concat(s.alias[t]),n[t].forEach((function(e){n[e]=[t].concat(n[t].filter((function(t){return e!==t})))}))})),[].concat(s.string).filter(Boolean).forEach((function(t){r.strings[t]=!0,n[t]&&(r.strings[n[t]]=!0)}));var o=s.default||{},h={_:[]};Object.keys(r.bools).forEach((function(t){c(t,void 0!==o[t]&&o[t])}));var l=[];function c(t,i,s){if(!s||!r.unknownFn||function(t,e){return r.allBools&&/^--[^=]+$/.test(e)||r.strings[t]||r.bools[t]||n[t]}(t,s)||!1!==r.unknownFn(s)){var o=!r.strings[t]&&e(i)?Number(i):i;a(h,t.split("."),o),(n[t]||[]).forEach((function(t){a(h,t.split("."),o)}))}}function a(t,e,s){for(var n=t,o=0;o<e.length-1;o++){if(i(n,h=e[o]))return;void 0===n[h]&&(n[h]={}),n[h]!==Object.prototype&&n[h]!==Number.prototype&&n[h]!==String.prototype||(n[h]={}),n[h]===Array.prototype&&(n[h]=[]),n=n[h]}var h;i(n,h=e[e.length-1])||(n!==Object.prototype&&n!==Number.prototype&&n!==String.prototype||(n={}),n===Array.prototype&&(n=[]),void 0===n[h]||r.bools[h]||"boolean"==typeof n[h]?n[h]=s:Array.isArray(n[h])?n[h].push(s):n[h]=[n[h],s])}function u(t){return n[t].some((function(t){return r.bools[t]}))}-1!==t.indexOf("--")&&(l=t.slice(t.indexOf("--")+1),t=t.slice(0,t.indexOf("--")));for(var d=0;d<t.length;d++){var p=t[d];if(/^--.+=/.test(p)){var f=p.match(/^--([^=]+)=([\s\S]*)$/),m=f[1],g=f[2];r.bools[m]&&(g="false"!==g),c(m,g,p)}else if(/^--no-.+/.test(p))c(m=p.match(/^--no-(.+)/)[1],!1,p);else if(/^--.+/.test(p))m=p.match(/^--(.+)/)[1],void 0===(w=t[d+1])||/^-/.test(w)||r.bools[m]||r.allBools||n[m]&&u(m)?/^(true|false)$/.test(w)?(c(m,"true"===w,p),d++):c(m,!r.strings[m]||"",p):(c(m,w,p),d++);else if(/^-[^-]+/.test(p)){for(var y=p.slice(1,-1).split(""),v=!1,b=0;b<y.length;b++){var w;if("-"!==(w=p.slice(b+2))){if(/[A-Za-z]/.test(y[b])&&/=/.test(w)){c(y[b],w.split("=")[1],p),v=!0;break}if(/[A-Za-z]/.test(y[b])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(w)){c(y[b],w,p),v=!0;break}if(y[b+1]&&y[b+1].match(/\W/)){c(y[b],p.slice(b+2),p),v=!0;break}c(y[b],!r.strings[y[b]]||"",p)}else c(y[b],w,p)}m=p.slice(-1)[0],v||"-"===m||(!t[d+1]||/^(-|--)[^-]/.test(t[d+1])||r.bools[m]||n[m]&&u(m)?t[d+1]&&/^(true|false)$/.test(t[d+1])?(c(m,"true"===t[d+1],p),d++):c(m,!r.strings[m]||"",p):(c(m,t[d+1],p),d++))}else if(r.unknownFn&&!1===r.unknownFn(p)||h._.push(r.strings._||!e(p)?p:Number(p)),s.stopEarly){h._.push.apply(h._,t.slice(d+1));break}}return Object.keys(o).forEach((function(t){var e,i,s;e=h,i=t.split("."),s=e,i.slice(0,-1).forEach((function(t){s=s[t]||{}})),i[i.length-1]in s||(a(h,t.split("."),o[t]),(n[t]||[]).forEach((function(e){a(h,e.split("."),o[t])})))})),s["--"]?(h["--"]=new Array,l.forEach((function(t){h["--"].push(t)}))):l.forEach((function(t){h._.push(t)})),h}},4818:t=>{"use strict";class e{constructor({token:t,date:e,parts:i,locales:s}){this.token=t,this.date=e||new Date,this.parts=i||[this],this.locales=s||{}}up(){}down(){}next(){const t=this.parts.indexOf(this);return this.parts.find(((i,s)=>s>t&&i instanceof e))}setTo(t){}prev(){let t=[].concat(this.parts).reverse();const i=t.indexOf(this);return t.find(((t,s)=>s>i&&t instanceof e))}toString(){return String(this.date)}}t.exports=e},5760:(t,e,i)=>{"use strict";const s=i(4818);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setDate(this.date.getDate()+1)}down(){this.date.setDate(this.date.getDate()-1)}setTo(t){this.date.setDate(parseInt(t.substr(-2)))}toString(){let t=this.date.getDate(),e=this.date.getDay();return"DD"===this.token?String(t).padStart(2,"0"):"Do"===this.token?t+(i=t,1==(i%=10)?"st":2===i?"nd":3===i?"rd":"th"):"d"===this.token?e+1:"ddd"===this.token?this.locales.weekdaysShort[e]:"dddd"===this.token?this.locales.weekdays[e]:t;var i}}},726:(t,e,i)=>{"use strict";const s=i(4818);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setHours(this.date.getHours()+1)}down(){this.date.setHours(this.date.getHours()-1)}setTo(t){this.date.setHours(parseInt(t.substr(-2)))}toString(){let t=this.date.getHours();return/h/.test(this.token)&&(t=t%12||12),this.token.length>1?String(t).padStart(2,"0"):t}}},9399:(t,e,i)=>{"use strict";t.exports={DatePart:i(4818),Meridiem:i(5371),Day:i(5760),Hours:i(726),Milliseconds:i(622),Minutes:i(7507),Month:i(5980),Seconds:i(6851),Year:i(5391)}},5371:(t,e,i)=>{"use strict";const s=i(4818);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setHours((this.date.getHours()+12)%24)}down(){this.up()}toString(){let t=this.date.getHours()>12?"pm":"am";return/\A/.test(this.token)?t.toUpperCase():t}}},622:(t,e,i)=>{"use strict";const s=i(4818);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setMilliseconds(this.date.getMilliseconds()+1)}down(){this.date.setMilliseconds(this.date.getMilliseconds()-1)}setTo(t){this.date.setMilliseconds(parseInt(t.substr(-this.token.length)))}toString(){return String(this.date.getMilliseconds()).padStart(4,"0").substr(0,this.token.length)}}},7507:(t,e,i)=>{"use strict";const s=i(4818);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setMinutes(this.date.getMinutes()+1)}down(){this.date.setMinutes(this.date.getMinutes()-1)}setTo(t){this.date.setMinutes(parseInt(t.substr(-2)))}toString(){let t=this.date.getMinutes();return this.token.length>1?String(t).padStart(2,"0"):t}}},5980:(t,e,i)=>{"use strict";const s=i(4818);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setMonth(this.date.getMonth()+1)}down(){this.date.setMonth(this.date.getMonth()-1)}setTo(t){t=parseInt(t.substr(-2))-1,this.date.setMonth(t<0?0:t)}toString(){let t=this.date.getMonth(),e=this.token.length;return 2===e?String(t+1).padStart(2,"0"):3===e?this.locales.monthsShort[t]:4===e?this.locales.months[t]:String(t+1)}}},6851:(t,e,i)=>{"use strict";const s=i(4818);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setSeconds(this.date.getSeconds()+1)}down(){this.date.setSeconds(this.date.getSeconds()-1)}setTo(t){this.date.setSeconds(parseInt(t.substr(-2)))}toString(){let t=this.date.getSeconds();return this.token.length>1?String(t).padStart(2,"0"):t}}},5391:(t,e,i)=>{"use strict";const s=i(4818);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setFullYear(this.date.getFullYear()+1)}down(){this.date.setFullYear(this.date.getFullYear()-1)}setTo(t){this.date.setFullYear(t.substr(-4))}toString(){let t=String(this.date.getFullYear()).padStart(4,"0");return 2===this.token.length?t.substr(-2):t}}},7884:(t,e,i)=>{"use strict";function s(t,e,i,s,r,n,o){try{var h=t[n](o),l=h.value}catch(t){return void i(t)}h.done?e(l):Promise.resolve(l).then(s,r)}const r=i(2263),n=i(9788),o=i(3700),h=o.erase,l=o.cursor,c=i(5697),a=c.style,u=c.clear,d=c.figures,p=c.wrap,f=c.entriesToDisplay,m=(t,e)=>t[e]&&(t[e].value||t[e].title||t[e]),g=(t,e)=>t[e]&&(t[e].title||t[e].value||t[e]);t.exports=class extends n{constructor(t={}){super(t),this.msg=t.message,this.suggest=t.suggest,this.choices=t.choices,this.initial="number"==typeof t.initial?t.initial:((t,e)=>{const i=t.findIndex((t=>t.value===e||t.title===e));return i>-1?i:void 0})(t.choices,t.initial),this.select=this.initial||t.cursor||0,this.i18n={noMatches:t.noMatches||"no matches found"},this.fallback=t.fallback||this.initial,this.clearFirst=t.clearFirst||!1,this.suggestions=[],this.input="",this.limit=t.limit||10,this.cursor=0,this.transform=a.render(t.style),this.scale=this.transform.scale,this.render=this.render.bind(this),this.complete=this.complete.bind(this),this.clear=u("",this.out.columns),this.complete(this.render),this.render()}set fallback(t){this._fb=Number.isSafeInteger(parseInt(t))?parseInt(t):t}get fallback(){let t;return"number"==typeof this._fb?t=this.choices[this._fb]:"string"==typeof this._fb&&(t={title:this._fb}),t||this._fb||{title:this.i18n.noMatches}}moveSelect(t){this.select=t,this.suggestions.length>0?this.value=m(this.suggestions,t):this.value=this.fallback.value,this.fire()}complete(t){var e,i=this;return(e=function*(){const e=i.completing=i.suggest(i.input,i.choices),s=yield e;if(i.completing!==e)return;i.suggestions=s.map(((t,e,i)=>({title:g(i,e),value:m(i,e),description:t.description}))),i.completing=!1;const r=Math.max(s.length-1,0);i.moveSelect(Math.min(r,i.select)),t&&t()},function(){var t=this,i=arguments;return new Promise((function(r,n){var o=e.apply(t,i);function h(t){s(o,r,n,h,l,"next",t)}function l(t){s(o,r,n,h,l,"throw",t)}h(void 0)}))})()}reset(){this.input="",this.complete((()=>{this.moveSelect(void 0!==this.initial?this.initial:0),this.render()})),this.render()}exit(){this.clearFirst&&this.input.length>0?this.reset():(this.done=this.exited=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}abort(){this.done=this.aborted=!0,this.exited=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.done=!0,this.aborted=this.exited=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}_(t,e){let i=this.input.slice(0,this.cursor),s=this.input.slice(this.cursor);this.input=`${i}${t}${s}`,this.cursor=i.length+1,this.complete(this.render),this.render()}delete(){if(0===this.cursor)return this.bell();let t=this.input.slice(0,this.cursor-1),e=this.input.slice(this.cursor);this.input=`${t}${e}`,this.complete(this.render),this.cursor=this.cursor-1,this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();let t=this.input.slice(0,this.cursor),e=this.input.slice(this.cursor+1);this.input=`${t}${e}`,this.complete(this.render),this.render()}first(){this.moveSelect(0),this.render()}last(){this.moveSelect(this.suggestions.length-1),this.render()}up(){0===this.select?this.moveSelect(this.suggestions.length-1):this.moveSelect(this.select-1),this.render()}down(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}next(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}nextPage(){this.moveSelect(Math.min(this.select+this.limit,this.suggestions.length-1)),this.render()}prevPage(){this.moveSelect(Math.max(this.select-this.limit,0)),this.render()}left(){if(this.cursor<=0)return this.bell();this.cursor=this.cursor-1,this.render()}right(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();this.cursor=this.cursor+1,this.render()}renderOption(t,e,i,s){let n,o=i?d.arrowUp:s?d.arrowDown:" ",h=e?r.cyan().underline(t.title):t.title;return o=(e?r.cyan(d.pointer)+" ":"  ")+o,t.description&&(n=` - ${t.description}`,(o.length+h.length+n.length>=this.out.columns||t.description.split(/\r?\n/).length>1)&&(n="\n"+p(t.description,{margin:3,width:this.out.columns}))),o+" "+h+r.gray(n||"")}render(){if(this.closed)return;this.firstRender?this.out.write(l.hide):this.out.write(u(this.outputText,this.out.columns)),super.render();let t=f(this.select,this.choices.length,this.limit),e=t.startIndex,i=t.endIndex;if(this.outputText=[a.symbol(this.done,this.aborted,this.exited),r.bold(this.msg),a.delimiter(this.completing),this.done&&this.suggestions[this.select]?this.suggestions[this.select].title:this.rendered=this.transform.render(this.input)].join(" "),!this.done){const t=this.suggestions.slice(e,i).map(((t,s)=>this.renderOption(t,this.select===s+e,0===s&&e>0,s+e===i-1&&i<this.choices.length))).join("\n");this.outputText+="\n"+(t||r.gray(this.fallback.title))}this.out.write(h.line+l.to(0)+this.outputText)}}},902:(t,e,i)=>{"use strict";const s=i(2263),r=i(3700).cursor,n=i(2348),o=i(5697),h=o.clear,l=o.style,c=o.figures;t.exports=class extends n{constructor(t={}){t.overrideRender=!0,super(t),this.inputValue="",this.clear=h("",this.out.columns),this.filteredOptions=this.value,this.render()}last(){this.cursor=this.filteredOptions.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.filteredOptions.length,this.render()}up(){0===this.cursor?this.cursor=this.filteredOptions.length-1:this.cursor--,this.render()}down(){this.cursor===this.filteredOptions.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.filteredOptions[this.cursor].selected=!1,this.render()}right(){if(this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();this.filteredOptions[this.cursor].selected=!0,this.render()}delete(){this.inputValue.length&&(this.inputValue=this.inputValue.substr(0,this.inputValue.length-1),this.updateFilteredOptions())}updateFilteredOptions(){const t=this.filteredOptions[this.cursor];this.filteredOptions=this.value.filter((t=>!this.inputValue||!("string"!=typeof t.title||!t.title.toLowerCase().includes(this.inputValue.toLowerCase()))||!("string"!=typeof t.value||!t.value.toLowerCase().includes(this.inputValue.toLowerCase()))));const e=this.filteredOptions.findIndex((e=>e===t));this.cursor=e<0?0:e,this.render()}handleSpaceToggle(){const t=this.filteredOptions[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}handleInputChange(t){this.inputValue=this.inputValue+t,this.updateFilteredOptions()}_(t,e){" "===t?this.handleSpaceToggle():this.handleInputChange(t)}renderInstructions(){return void 0===this.instructions||this.instructions?"string"==typeof this.instructions?this.instructions:`\nInstructions:\n    ${c.arrowUp}/${c.arrowDown}: Highlight option\n    ${c.arrowLeft}/${c.arrowRight}/[space]: Toggle selection\n    [a,b,c]/delete: Filter choices\n    enter/return: Complete answer\n`:""}renderCurrentInput(){return`\nFiltered results for: ${this.inputValue?this.inputValue:s.gray("Enter something to filter")}\n`}renderOption(t,e,i){let r;return r=e.disabled?t===i?s.gray().underline(e.title):s.strikethrough().gray(e.title):t===i?s.cyan().underline(e.title):e.title,(e.selected?s.green(c.radioOn):c.radioOff)+"  "+r}renderDoneOrInstructions(){if(this.done)return this.value.filter((t=>t.selected)).map((t=>t.title)).join(", ");const t=[s.gray(this.hint),this.renderInstructions(),this.renderCurrentInput()];return this.filteredOptions.length&&this.filteredOptions[this.cursor].disabled&&t.push(s.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(r.hide),super.render();let t=[l.symbol(this.done,this.aborted),s.bold(this.msg),l.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=s.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.filteredOptions),this.out.write(this.clear+t),this.clear=h(t,this.out.columns)}}},3760:(t,e,i)=>{"use strict";const s=i(2263),r=i(9788),n=i(5697),o=n.style,h=n.clear,l=i(3700),c=l.erase,a=l.cursor;t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.value=t.initial,this.initialValue=!!t.initial,this.yesMsg=t.yes||"yes",this.yesOption=t.yesOption||"(Y/n)",this.noMsg=t.no||"no",this.noOption=t.noOption||"(y/N)",this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.value=this.value||!1,this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}_(t,e){return"y"===t.toLowerCase()?(this.value=!0,this.submit()):"n"===t.toLowerCase()?(this.value=!1,this.submit()):this.bell()}render(){this.closed||(this.firstRender?this.out.write(a.hide):this.out.write(h(this.outputText,this.out.columns)),super.render(),this.outputText=[o.symbol(this.done,this.aborted),s.bold(this.msg),o.delimiter(this.done),this.done?this.value?this.yesMsg:this.noMsg:s.gray(this.initialValue?this.yesOption:this.noOption)].join(" "),this.out.write(c.line+a.to(0)+this.outputText))}}},8643:(t,e,i)=>{"use strict";function s(t,e,i,s,r,n,o){try{var h=t[n](o),l=h.value}catch(t){return void i(t)}h.done?e(l):Promise.resolve(l).then(s,r)}function r(t){return function(){var e=this,i=arguments;return new Promise((function(r,n){var o=t.apply(e,i);function h(t){s(o,r,n,h,l,"next",t)}function l(t){s(o,r,n,h,l,"throw",t)}h(void 0)}))}}const n=i(2263),o=i(9788),h=i(5697),l=h.style,c=h.clear,a=h.figures,u=i(3700),d=u.erase,p=u.cursor,f=i(9399),m=f.DatePart,g=f.Meridiem,y=f.Day,v=f.Hours,b=f.Milliseconds,w=f.Minutes,S=f.Month,x=f.Seconds,O=f.Year,E=/\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g,k={1:({token:t})=>t.replace(/\\(.)/g,"$1"),2:t=>new y(t),3:t=>new S(t),4:t=>new O(t),5:t=>new g(t),6:t=>new v(t),7:t=>new w(t),8:t=>new x(t),9:t=>new b(t)},M={months:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),monthsShort:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),weekdaysShort:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(",")};t.exports=class extends o{constructor(t={}){super(t),this.msg=t.message,this.cursor=0,this.typed="",this.locales=Object.assign(M,t.locales),this._date=t.initial||new Date,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.mask=t.mask||"YYYY-MM-DD HH:mm:ss",this.clear=c("",this.out.columns),this.render()}get value(){return this.date}get date(){return this._date}set date(t){t&&this._date.setTime(t.getTime())}set mask(t){let e;for(this.parts=[];e=E.exec(t);){let t=e.shift(),i=e.findIndex((t=>null!=t));this.parts.push(i in k?k[i]({token:e[i]||t,date:this.date,parts:this.parts,locales:this.locales}):e[i]||t)}let i=this.parts.reduce(((t,e)=>("string"==typeof e&&"string"==typeof t[t.length-1]?t[t.length-1]+=e:t.push(e),t)),[]);this.parts.splice(0),this.parts.push(...i),this.reset()}moveCursor(t){this.typed="",this.cursor=t,this.fire()}reset(){this.moveCursor(this.parts.findIndex((t=>t instanceof m))),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}validate(){var t=this;return r((function*(){let e=yield t.validator(t.value);"string"==typeof e&&(t.errorMsg=e,e=!1),t.error=!e}))()}submit(){var t=this;return r((function*(){if(yield t.validate(),t.error)return t.color="red",t.fire(),void t.render();t.done=!0,t.aborted=!1,t.fire(),t.render(),t.out.write("\n"),t.close()}))()}up(){this.typed="",this.parts[this.cursor].up(),this.render()}down(){this.typed="",this.parts[this.cursor].down(),this.render()}left(){let t=this.parts[this.cursor].prev();if(null==t)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}right(){let t=this.parts[this.cursor].next();if(null==t)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}next(){let t=this.parts[this.cursor].next();this.moveCursor(t?this.parts.indexOf(t):this.parts.findIndex((t=>t instanceof m))),this.render()}_(t){/\d/.test(t)&&(this.typed+=t,this.parts[this.cursor].setTo(this.typed),this.render())}render(){this.closed||(this.firstRender?this.out.write(p.hide):this.out.write(c(this.outputText,this.out.columns)),super.render(),this.outputText=[l.symbol(this.done,this.aborted),n.bold(this.msg),l.delimiter(!1),this.parts.reduce(((t,e,i)=>t.concat(i!==this.cursor||this.done?e:n.cyan().underline(e.toString()))),[]).join("")].join(" "),this.error&&(this.outputText+=this.errorMsg.split("\n").reduce(((t,e,i)=>t+`\n${i?" ":a.pointerSmall} ${n.red().italic(e)}`),"")),this.out.write(d.line+p.to(0)+this.outputText))}}},7852:(t,e,i)=>{"use strict";t.exports={TextPrompt:i(1348),SelectPrompt:i(1668),TogglePrompt:i(549),DatePrompt:i(8643),NumberPrompt:i(207),MultiselectPrompt:i(2348),AutocompletePrompt:i(7884),AutocompleteMultiselectPrompt:i(902),ConfirmPrompt:i(3760)}},2348:(t,e,i)=>{"use strict";const s=i(2263),r=i(3700).cursor,n=i(9788),o=i(5697),h=o.clear,l=o.figures,c=o.style,a=o.wrap,u=o.entriesToDisplay;t.exports=class extends n{constructor(t={}){super(t),this.msg=t.message,this.cursor=t.cursor||0,this.scrollIndex=t.cursor||0,this.hint=t.hint||"",this.warn=t.warn||"- This option is disabled -",this.minSelected=t.min,this.showMinError=!1,this.maxChoices=t.max,this.instructions=t.instructions,this.optionsPerPage=t.optionsPerPage||10,this.value=t.choices.map(((t,e)=>("string"==typeof t&&(t={title:t,value:e}),{title:t&&(t.title||t.value||t),description:t&&t.description,value:t&&(void 0===t.value?e:t.value),selected:t&&t.selected,disabled:t&&t.disabled}))),this.clear=h("",this.out.columns),t.overrideRender||this.render()}reset(){this.value.map((t=>!t.selected)),this.cursor=0,this.fire(),this.render()}selected(){return this.value.filter((t=>t.selected))}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){const t=this.value.filter((t=>t.selected));this.minSelected&&t.length<this.minSelected?(this.showMinError=!0,this.render()):(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.value.length,this.render()}up(){0===this.cursor?this.cursor=this.value.length-1:this.cursor--,this.render()}down(){this.cursor===this.value.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.value[this.cursor].selected=!1,this.render()}right(){if(this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();this.value[this.cursor].selected=!0,this.render()}handleSpaceToggle(){const t=this.value[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}toggleAll(){if(void 0!==this.maxChoices||this.value[this.cursor].disabled)return this.bell();const t=!this.value[this.cursor].selected;this.value.filter((t=>!t.disabled)).forEach((e=>e.selected=t)),this.render()}_(t,e){if(" "===t)this.handleSpaceToggle();else{if("a"!==t)return this.bell();this.toggleAll()}}renderInstructions(){return void 0===this.instructions||this.instructions?"string"==typeof this.instructions?this.instructions:`\nInstructions:\n    ${l.arrowUp}/${l.arrowDown}: Highlight option\n    ${l.arrowLeft}/${l.arrowRight}/[space]: Toggle selection\n`+(void 0===this.maxChoices?"    a: Toggle all\n":"")+"    enter/return: Complete answer":""}renderOption(t,e,i,r){const n=(e.selected?s.green(l.radioOn):l.radioOff)+" "+r+" ";let o,h;return e.disabled?o=t===i?s.gray().underline(e.title):s.strikethrough().gray(e.title):(o=t===i?s.cyan().underline(e.title):e.title,t===i&&e.description&&(h=` - ${e.description}`,(n.length+o.length+h.length>=this.out.columns||e.description.split(/\r?\n/).length>1)&&(h="\n"+a(e.description,{margin:n.length,width:this.out.columns})))),n+o+s.gray(h||"")}paginateOptions(t){if(0===t.length)return s.red("No matches for this query.");let e,i=u(this.cursor,t.length,this.optionsPerPage),r=i.startIndex,n=i.endIndex,o=[];for(let i=r;i<n;i++)e=i===r&&r>0?l.arrowUp:i===n-1&&n<t.length?l.arrowDown:" ",o.push(this.renderOption(this.cursor,t[i],i,e));return"\n"+o.join("\n")}renderOptions(t){return this.done?"":this.paginateOptions(t)}renderDoneOrInstructions(){if(this.done)return this.value.filter((t=>t.selected)).map((t=>t.title)).join(", ");const t=[s.gray(this.hint),this.renderInstructions()];return this.value[this.cursor].disabled&&t.push(s.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(r.hide),super.render();let t=[c.symbol(this.done,this.aborted),s.bold(this.msg),c.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=s.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.value),this.out.write(this.clear+t),this.clear=h(t,this.out.columns)}}},207:(t,e,i)=>{"use strict";function s(t,e,i,s,r,n,o){try{var h=t[n](o),l=h.value}catch(t){return void i(t)}h.done?e(l):Promise.resolve(l).then(s,r)}function r(t){return function(){var e=this,i=arguments;return new Promise((function(r,n){var o=t.apply(e,i);function h(t){s(o,r,n,h,l,"next",t)}function l(t){s(o,r,n,h,l,"throw",t)}h(void 0)}))}}const n=i(2263),o=i(9788),h=i(3700),l=h.cursor,c=h.erase,a=i(5697),u=a.style,d=a.figures,p=a.clear,f=a.lines,m=/[0-9]/,g=t=>void 0!==t,y=(t,e)=>{let i=Math.pow(10,e);return Math.round(t*i)/i};t.exports=class extends o{constructor(t={}){super(t),this.transform=u.render(t.style),this.msg=t.message,this.initial=g(t.initial)?t.initial:"",this.float=!!t.float,this.round=t.round||2,this.inc=t.increment||1,this.min=g(t.min)?t.min:-1/0,this.max=g(t.max)?t.max:1/0,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.color="cyan",this.value="",this.typed="",this.lastHit=0,this.render()}set value(t){t||0===t?(this.placeholder=!1,this.rendered=this.transform.render(`${y(t,this.round)}`),this._value=y(t,this.round)):(this.placeholder=!0,this.rendered=n.gray(this.transform.render(`${this.initial}`)),this._value=""),this.fire()}get value(){return this._value}parse(t){return this.float?parseFloat(t):parseInt(t)}valid(t){return"-"===t||"."===t&&this.float||m.test(t)}reset(){this.typed="",this.value="",this.fire(),this.render()}exit(){this.abort()}abort(){let t=this.value;this.value=""!==t?t:this.initial,this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}validate(){var t=this;return r((function*(){let e=yield t.validator(t.value);"string"==typeof e&&(t.errorMsg=e,e=!1),t.error=!e}))()}submit(){var t=this;return r((function*(){if(yield t.validate(),t.error)return t.color="red",t.fire(),void t.render();let e=t.value;t.value=""!==e?e:t.initial,t.done=!0,t.aborted=!1,t.error=!1,t.fire(),t.render(),t.out.write("\n"),t.close()}))()}up(){if(this.typed="",""===this.value&&(this.value=this.min-this.inc),this.value>=this.max)return this.bell();this.value+=this.inc,this.color="cyan",this.fire(),this.render()}down(){if(this.typed="",""===this.value&&(this.value=this.min+this.inc),this.value<=this.min)return this.bell();this.value-=this.inc,this.color="cyan",this.fire(),this.render()}delete(){let t=this.value.toString();if(0===t.length)return this.bell();this.value=this.parse(t=t.slice(0,-1))||"",""!==this.value&&this.value<this.min&&(this.value=this.min),this.color="cyan",this.fire(),this.render()}next(){this.value=this.initial,this.fire(),this.render()}_(t,e){if(!this.valid(t))return this.bell();const i=Date.now();if(i-this.lastHit>1e3&&(this.typed=""),this.typed+=t,this.lastHit=i,this.color="cyan","."===t)return this.fire();this.value=Math.min(this.parse(this.typed),this.max),this.value>this.max&&(this.value=this.max),this.value<this.min&&(this.value=this.min),this.fire(),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(l.down(f(this.outputError,this.out.columns)-1)+p(this.outputError,this.out.columns)),this.out.write(p(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[u.symbol(this.done,this.aborted),n.bold(this.msg),u.delimiter(this.done),this.done&&(this.done||this.placeholder)?this.rendered:n[this.color]().underline(this.rendered)].join(" "),this.error&&(this.outputError+=this.errorMsg.split("\n").reduce(((t,e,i)=>t+`\n${i?" ":d.pointerSmall} ${n.red().italic(e)}`),"")),this.out.write(c.line+l.to(0)+this.outputText+l.save+this.outputError+l.restore))}}},9788:(t,e,i)=>{"use strict";const s=i(4521),r=i(5697).action,n=i(2361),o=i(3700),h=o.beep,l=o.cursor,c=i(2263);t.exports=class extends n{constructor(t={}){super(),this.firstRender=!0,this.in=t.stdin||process.stdin,this.out=t.stdout||process.stdout,this.onRender=(t.onRender||(()=>{})).bind(this);const e=s.createInterface({input:this.in,escapeCodeTimeout:50});s.emitKeypressEvents(this.in,e),this.in.isTTY&&this.in.setRawMode(!0);const i=["SelectPrompt","MultiselectPrompt"].indexOf(this.constructor.name)>-1,n=(t,e)=>{let s=r(e,i);!1===s?this._&&this._(t,e):"function"==typeof this[s]?this[s](e):this.bell()};this.close=()=>{this.out.write(l.show),this.in.removeListener("keypress",n),this.in.isTTY&&this.in.setRawMode(!1),e.close(),this.emit(this.aborted?"abort":this.exited?"exit":"submit",this.value),this.closed=!0},this.in.on("keypress",n)}fire(){this.emit("state",{value:this.value,aborted:!!this.aborted,exited:!!this.exited})}bell(){this.out.write(h)}render(){this.onRender(c),this.firstRender&&(this.firstRender=!1)}}},1668:(t,e,i)=>{"use strict";const s=i(2263),r=i(9788),n=i(5697),o=n.style,h=n.clear,l=n.figures,c=n.wrap,a=n.entriesToDisplay,u=i(3700).cursor;t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.hint=t.hint||"- Use arrow-keys. Return to submit.",this.warn=t.warn||"- This option is disabled",this.cursor=t.initial||0,this.choices=t.choices.map(((t,e)=>("string"==typeof t&&(t={title:t,value:e}),{title:t&&(t.title||t.value||t),value:t&&(void 0===t.value?e:t.value),description:t&&t.description,selected:t&&t.selected,disabled:t&&t.disabled}))),this.optionsPerPage=t.optionsPerPage||10,this.value=(this.choices[this.cursor]||{}).value,this.clear=h("",this.out.columns),this.render()}moveCursor(t){this.cursor=t,this.value=this.choices[t].value,this.fire()}reset(){this.moveCursor(0),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.selection.disabled?this.bell():(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}first(){this.moveCursor(0),this.render()}last(){this.moveCursor(this.choices.length-1),this.render()}up(){0===this.cursor?this.moveCursor(this.choices.length-1):this.moveCursor(this.cursor-1),this.render()}down(){this.cursor===this.choices.length-1?this.moveCursor(0):this.moveCursor(this.cursor+1),this.render()}next(){this.moveCursor((this.cursor+1)%this.choices.length),this.render()}_(t,e){if(" "===t)return this.submit()}get selection(){return this.choices[this.cursor]}render(){if(this.closed)return;this.firstRender?this.out.write(u.hide):this.out.write(h(this.outputText,this.out.columns)),super.render();let t=a(this.cursor,this.choices.length,this.optionsPerPage),e=t.startIndex,i=t.endIndex;if(this.outputText=[o.symbol(this.done,this.aborted),s.bold(this.msg),o.delimiter(!1),this.done?this.selection.title:this.selection.disabled?s.yellow(this.warn):s.gray(this.hint)].join(" "),!this.done){this.outputText+="\n";for(let t=e;t<i;t++){let r,n,o="",h=this.choices[t];n=t===e&&e>0?l.arrowUp:t===i-1&&i<this.choices.length?l.arrowDown:" ",h.disabled?(r=this.cursor===t?s.gray().underline(h.title):s.strikethrough().gray(h.title),n=(this.cursor===t?s.bold().gray(l.pointer)+" ":"  ")+n):(r=this.cursor===t?s.cyan().underline(h.title):h.title,n=(this.cursor===t?s.cyan(l.pointer)+" ":"  ")+n,h.description&&this.cursor===t&&(o=` - ${h.description}`,(n.length+r.length+o.length>=this.out.columns||h.description.split(/\r?\n/).length>1)&&(o="\n"+c(h.description,{margin:3,width:this.out.columns})))),this.outputText+=`${n} ${r}${s.gray(o)}\n`}}this.out.write(this.outputText)}}},1348:(t,e,i)=>{"use strict";function s(t,e,i,s,r,n,o){try{var h=t[n](o),l=h.value}catch(t){return void i(t)}h.done?e(l):Promise.resolve(l).then(s,r)}function r(t){return function(){var e=this,i=arguments;return new Promise((function(r,n){var o=t.apply(e,i);function h(t){s(o,r,n,h,l,"next",t)}function l(t){s(o,r,n,h,l,"throw",t)}h(void 0)}))}}const n=i(2263),o=i(9788),h=i(3700),l=h.erase,c=h.cursor,a=i(5697),u=a.style,d=a.clear,p=a.lines,f=a.figures;t.exports=class extends o{constructor(t={}){super(t),this.transform=u.render(t.style),this.scale=this.transform.scale,this.msg=t.message,this.initial=t.initial||"",this.validator=t.validate||(()=>!0),this.value="",this.errorMsg=t.error||"Please Enter A Valid Value",this.cursor=Number(!!this.initial),this.cursorOffset=0,this.clear=d("",this.out.columns),this.render()}set value(t){!t&&this.initial?(this.placeholder=!0,this.rendered=n.gray(this.transform.render(this.initial))):(this.placeholder=!1,this.rendered=this.transform.render(t)),this._value=t,this.fire()}get value(){return this._value}reset(){this.value="",this.cursor=Number(!!this.initial),this.cursorOffset=0,this.fire(),this.render()}exit(){this.abort()}abort(){this.value=this.value||this.initial,this.done=this.aborted=!0,this.error=!1,this.red=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}validate(){var t=this;return r((function*(){let e=yield t.validator(t.value);"string"==typeof e&&(t.errorMsg=e,e=!1),t.error=!e}))()}submit(){var t=this;return r((function*(){if(t.value=t.value||t.initial,t.cursorOffset=0,t.cursor=t.rendered.length,yield t.validate(),t.error)return t.red=!0,t.fire(),void t.render();t.done=!0,t.aborted=!1,t.fire(),t.render(),t.out.write("\n"),t.close()}))()}next(){if(!this.placeholder)return this.bell();this.value=this.initial,this.cursor=this.rendered.length,this.fire(),this.render()}moveCursor(t){this.placeholder||(this.cursor=this.cursor+t,this.cursorOffset+=t)}_(t,e){let i=this.value.slice(0,this.cursor),s=this.value.slice(this.cursor);this.value=`${i}${t}${s}`,this.red=!1,this.cursor=this.placeholder?0:i.length+1,this.render()}delete(){if(this.isCursorAtStart())return this.bell();let t=this.value.slice(0,this.cursor-1),e=this.value.slice(this.cursor);this.value=`${t}${e}`,this.red=!1,this.isCursorAtStart()?this.cursorOffset=0:(this.cursorOffset++,this.moveCursor(-1)),this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();let t=this.value.slice(0,this.cursor),e=this.value.slice(this.cursor+1);this.value=`${t}${e}`,this.red=!1,this.isCursorAtEnd()?this.cursorOffset=0:this.cursorOffset++,this.render()}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length,this.render()}left(){if(this.cursor<=0||this.placeholder)return this.bell();this.moveCursor(-1),this.render()}right(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();this.moveCursor(1),this.render()}isCursorAtStart(){return 0===this.cursor||this.placeholder&&1===this.cursor}isCursorAtEnd(){return this.cursor===this.rendered.length||this.placeholder&&this.cursor===this.rendered.length+1}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(c.down(p(this.outputError,this.out.columns)-1)+d(this.outputError,this.out.columns)),this.out.write(d(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[u.symbol(this.done,this.aborted),n.bold(this.msg),u.delimiter(this.done),this.red?n.red(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split("\n").reduce(((t,e,i)=>t+`\n${i?" ":f.pointerSmall} ${n.red().italic(e)}`),"")),this.out.write(l.line+c.to(0)+this.outputText+c.save+this.outputError+c.restore+c.move(this.cursorOffset,0)))}}},549:(t,e,i)=>{"use strict";const s=i(2263),r=i(9788),n=i(5697),o=n.style,h=n.clear,l=i(3700),c=l.cursor,a=l.erase;t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.value=!!t.initial,this.active=t.active||"on",this.inactive=t.inactive||"off",this.initialValue=this.value,this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}deactivate(){if(!1===this.value)return this.bell();this.value=!1,this.render()}activate(){if(!0===this.value)return this.bell();this.value=!0,this.render()}delete(){this.deactivate()}left(){this.deactivate()}right(){this.activate()}down(){this.deactivate()}up(){this.activate()}next(){this.value=!this.value,this.fire(),this.render()}_(t,e){if(" "===t)this.value=!this.value;else if("1"===t)this.value=!0;else{if("0"!==t)return this.bell();this.value=!1}this.render()}render(){this.closed||(this.firstRender?this.out.write(c.hide):this.out.write(h(this.outputText,this.out.columns)),super.render(),this.outputText=[o.symbol(this.done,this.aborted),s.bold(this.msg),o.delimiter(this.done),this.value?this.inactive:s.cyan().underline(this.inactive),s.gray("/"),this.value?s.cyan().underline(this.active):this.active].join(" "),this.out.write(a.line+c.to(0)+this.outputText))}}},2433:(t,e,i)=>{"use strict";function s(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,s)}return i}function r(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?s(Object(i),!0).forEach((function(e){n(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):s(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function n(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function o(t,e){var i="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!i){if(Array.isArray(t)||(i=function(t,e){if(t){if("string"==typeof t)return h(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?h(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var s=0,r=function(){};return{s:r,n:function(){return s>=t.length?{done:!0}:{done:!1,value:t[s++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o=!0,l=!1;return{s:function(){i=i.call(t)},n:function(){var t=i.next();return o=t.done,t},e:function(t){l=!0,n=t},f:function(){try{o||null==i.return||i.return()}finally{if(l)throw n}}}}function h(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,s=new Array(e);i<e;i++)s[i]=t[i];return s}function l(t,e,i,s,r,n,o){try{var h=t[n](o),l=h.value}catch(t){return void i(t)}h.done?e(l):Promise.resolve(l).then(s,r)}function c(t){return function(){var e=this,i=arguments;return new Promise((function(s,r){var n=t.apply(e,i);function o(t){l(n,s,r,o,h,"next",t)}function h(t){l(n,s,r,o,h,"throw",t)}o(void 0)}))}}const a=i(7054),u=["suggest","format","onState","validate","onRender","type"],d=()=>{};function p(){return f.apply(this,arguments)}function f(){return f=c((function*(t=[],{onSubmit:e=d,onCancel:i=d}={}){const s={},n=p._override||{};let h,l,f,g,y,v;t=[].concat(t);const b=function(){var t=c((function*(t,e,i=!1){if(i||!t.validate||!0===t.validate(e))return t.format?yield t.format(e,s):e}));return function(e,i){return t.apply(this,arguments)}}();var w,S=o(t);try{for(S.s();!(w=S.n()).done;){l=w.value;var x=l;if(g=x.name,y=x.type,"function"==typeof y&&(y=yield y(h,r({},s),l),l.type=y),y){for(let t in l){if(u.includes(t))continue;let e=l[t];l[t]="function"==typeof e?yield e(h,r({},s),v):e}if(v=l,"string"!=typeof l.message)throw new Error("prompt message is required");var O=l;if(g=O.name,y=O.type,void 0===a[y])throw new Error(`prompt type (${y}) is not defined`);if(void 0===n[l.name]||(h=yield b(l,n[l.name]),void 0===h)){try{h=p._injected?m(p._injected,l.initial):yield a[y](l),s[g]=h=yield b(l,h,!0),f=yield e(l,h,s)}catch(t){f=!(yield i(l,s))}if(f)return s}else s[g]=h}}}catch(t){S.e(t)}finally{S.f()}return s})),f.apply(this,arguments)}function m(t,e){const i=t.shift();if(i instanceof Error)throw i;return void 0===i?e:i}t.exports=Object.assign(p,{prompt:p,prompts:a,inject:function(t){p._injected=(p._injected||[]).concat(t)},override:function(t){p._override=Object.assign({},t)}})},7054:(t,e,i)=>{"use strict";const s=e,r=i(7852),n=t=>t;function o(t,e,i={}){return new Promise(((s,o)=>{const h=new r[t](e),l=i.onAbort||n,c=i.onSubmit||n,a=i.onExit||n;h.on("state",e.onState||n),h.on("submit",(t=>s(c(t)))),h.on("exit",(t=>s(a(t)))),h.on("abort",(t=>o(l(t))))}))}s.text=t=>o("TextPrompt",t),s.password=t=>(t.style="password",s.text(t)),s.invisible=t=>(t.style="invisible",s.text(t)),s.number=t=>o("NumberPrompt",t),s.date=t=>o("DatePrompt",t),s.confirm=t=>o("ConfirmPrompt",t),s.list=t=>{const e=t.separator||",";return o("TextPrompt",t,{onSubmit:t=>t.split(e).map((t=>t.trim()))})},s.toggle=t=>o("TogglePrompt",t),s.select=t=>o("SelectPrompt",t),s.multiselect=t=>{t.choices=[].concat(t.choices||[]);const e=t=>t.filter((t=>t.selected)).map((t=>t.value));return o("MultiselectPrompt",t,{onAbort:e,onSubmit:e})},s.autocompleteMultiselect=t=>{t.choices=[].concat(t.choices||[]);const e=t=>t.filter((t=>t.selected)).map((t=>t.value));return o("AutocompleteMultiselectPrompt",t,{onAbort:e,onSubmit:e})};const h=(t,e)=>Promise.resolve(e.filter((e=>e.title.slice(0,t.length).toLowerCase()===t.toLowerCase())));s.autocomplete=t=>(t.suggest=t.suggest||h,t.choices=[].concat(t.choices||[]),o("AutocompletePrompt",t))},6226:t=>{"use strict";t.exports=(t,e)=>{if(!t.meta||"escape"===t.name){if(t.ctrl){if("a"===t.name)return"first";if("c"===t.name)return"abort";if("d"===t.name)return"abort";if("e"===t.name)return"last";if("g"===t.name)return"reset"}if(e){if("j"===t.name)return"down";if("k"===t.name)return"up"}return"return"===t.name||"enter"===t.name?"submit":"backspace"===t.name?"delete":"delete"===t.name?"deleteForward":"abort"===t.name?"abort":"escape"===t.name?"exit":"tab"===t.name?"next":"pagedown"===t.name?"nextPage":"pageup"===t.name?"prevPage":"home"===t.name?"home":"end"===t.name?"end":"up"===t.name?"up":"down"===t.name?"down":"right"===t.name?"right":"left"===t.name&&"left"}}},3272:(t,e,i)=>{"use strict";function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,s=new Array(e);i<e;i++)s[i]=t[i];return s}const r=i(6342),n=i(3700),o=n.erase,h=n.cursor;t.exports=function(t,e){if(!e)return o.line+h.to(0);let i=0;var n,l=function(t,e){var i="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!i){if(Array.isArray(t)||(i=function(t,e){if(t){if("string"==typeof t)return s(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?s(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var r=0,n=function(){};return{s:n,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,h=!0,l=!1;return{s:function(){i=i.call(t)},n:function(){var t=i.next();return h=t.done,t},e:function(t){l=!0,o=t},f:function(){try{h||null==i.return||i.return()}finally{if(l)throw o}}}}(t.split(/\r?\n/));try{for(l.s();!(n=l.n()).done;){let t=n.value;i+=1+Math.floor(Math.max([...r(t)].length-1,0)/e)}}catch(t){l.e(t)}finally{l.f()}return o.lines(i)}},8860:t=>{"use strict";t.exports=(t,e,i)=>{i=i||e;let s=Math.min(e-i,t-Math.floor(i/2));return s<0&&(s=0),{startIndex:s,endIndex:Math.min(s+i,e)}}},6737:t=>{"use strict";const e={arrowUp:"↑",arrowDown:"↓",arrowLeft:"←",arrowRight:"→",radioOn:"◉",radioOff:"◯",tick:"✔",cross:"✖",ellipsis:"…",pointerSmall:"›",line:"─",pointer:"❯"},i={arrowUp:e.arrowUp,arrowDown:e.arrowDown,arrowLeft:e.arrowLeft,arrowRight:e.arrowRight,radioOn:"(*)",radioOff:"( )",tick:"√",cross:"×",ellipsis:"...",pointerSmall:"»",line:"─",pointer:">"},s="win32"===process.platform?i:e;t.exports=s},5697:(t,e,i)=>{"use strict";t.exports={action:i(6226),clear:i(3272),style:i(122),strip:i(6342),figures:i(6737),lines:i(748),wrap:i(9791),entriesToDisplay:i(8860)}},748:(t,e,i)=>{"use strict";const s=i(6342);t.exports=function(t,e){let i=String(s(t)||"").split(/\r?\n/);return e?i.map((t=>Math.ceil(t.length/e))).reduce(((t,e)=>t+e)):i.length}},6342:t=>{"use strict";t.exports=t=>{const e=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"].join("|"),i=new RegExp(e,"g");return"string"==typeof t?t.replace(i,""):t}},122:(t,e,i)=>{"use strict";const s=i(2263),r=i(6737),n=Object.freeze({password:{scale:1,render:t=>"*".repeat(t.length)},emoji:{scale:2,render:t=>"😃".repeat(t.length)},invisible:{scale:0,render:t=>""},default:{scale:1,render:t=>`${t}`}}),o=Object.freeze({aborted:s.red(r.cross),done:s.green(r.tick),exited:s.yellow(r.cross),default:s.cyan("?")});t.exports={styles:n,render:t=>n[t]||n.default,symbols:o,symbol:(t,e,i)=>e?o.aborted:i?o.exited:t?o.done:o.default,delimiter:t=>s.gray(t?r.ellipsis:r.pointerSmall),item:(t,e)=>s.gray(t?e?r.pointerSmall:"+":r.line)}},9791:t=>{"use strict";t.exports=(t,e={})=>{const i=Number.isSafeInteger(parseInt(e.margin))?new Array(parseInt(e.margin)).fill(" ").join(""):e.margin||"",s=e.width;return(t||"").split(/\r?\n/g).map((t=>t.split(/\s+/g).reduce(((t,e)=>(e.length+i.length>=s||t[t.length-1].length+e.length+1<s?t[t.length-1]+=` ${e}`:t.push(`${i}${e}`),t)),[i]).join("\n"))).join("\n")}},4995:(t,e,i)=>{t.exports=function(t){t=(Array.isArray(t)?t:t.split(".")).map(Number);let e=0,i=process.versions.node.split(".").map(Number);for(;e<t.length;e++){if(i[e]>t[e])return!1;if(t[e]>i[e])return!0}return!1}("8.6.0")?i(2433):i(8916)},8125:t=>{"use strict";class e{constructor({token:t,date:e,parts:i,locales:s}){this.token=t,this.date=e||new Date,this.parts=i||[this],this.locales=s||{}}up(){}down(){}next(){const t=this.parts.indexOf(this);return this.parts.find(((i,s)=>s>t&&i instanceof e))}setTo(t){}prev(){let t=[].concat(this.parts).reverse();const i=t.indexOf(this);return t.find(((t,s)=>s>i&&t instanceof e))}toString(){return String(this.date)}}t.exports=e},8408:(t,e,i)=>{"use strict";const s=i(8125);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setDate(this.date.getDate()+1)}down(){this.date.setDate(this.date.getDate()-1)}setTo(t){this.date.setDate(parseInt(t.substr(-2)))}toString(){let t=this.date.getDate(),e=this.date.getDay();return"DD"===this.token?String(t).padStart(2,"0"):"Do"===this.token?t+(i=t,1==(i%=10)?"st":2===i?"nd":3===i?"rd":"th"):"d"===this.token?e+1:"ddd"===this.token?this.locales.weekdaysShort[e]:"dddd"===this.token?this.locales.weekdays[e]:t;var i}}},8154:(t,e,i)=>{"use strict";const s=i(8125);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setHours(this.date.getHours()+1)}down(){this.date.setHours(this.date.getHours()-1)}setTo(t){this.date.setHours(parseInt(t.substr(-2)))}toString(){let t=this.date.getHours();return/h/.test(this.token)&&(t=t%12||12),this.token.length>1?String(t).padStart(2,"0"):t}}},4616:(t,e,i)=>{"use strict";t.exports={DatePart:i(8125),Meridiem:i(9026),Day:i(8408),Hours:i(8154),Milliseconds:i(1725),Minutes:i(9002),Month:i(9069),Seconds:i(1583),Year:i(7971)}},9026:(t,e,i)=>{"use strict";const s=i(8125);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setHours((this.date.getHours()+12)%24)}down(){this.up()}toString(){let t=this.date.getHours()>12?"pm":"am";return/\A/.test(this.token)?t.toUpperCase():t}}},1725:(t,e,i)=>{"use strict";const s=i(8125);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setMilliseconds(this.date.getMilliseconds()+1)}down(){this.date.setMilliseconds(this.date.getMilliseconds()-1)}setTo(t){this.date.setMilliseconds(parseInt(t.substr(-this.token.length)))}toString(){return String(this.date.getMilliseconds()).padStart(4,"0").substr(0,this.token.length)}}},9002:(t,e,i)=>{"use strict";const s=i(8125);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setMinutes(this.date.getMinutes()+1)}down(){this.date.setMinutes(this.date.getMinutes()-1)}setTo(t){this.date.setMinutes(parseInt(t.substr(-2)))}toString(){let t=this.date.getMinutes();return this.token.length>1?String(t).padStart(2,"0"):t}}},9069:(t,e,i)=>{"use strict";const s=i(8125);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setMonth(this.date.getMonth()+1)}down(){this.date.setMonth(this.date.getMonth()-1)}setTo(t){t=parseInt(t.substr(-2))-1,this.date.setMonth(t<0?0:t)}toString(){let t=this.date.getMonth(),e=this.token.length;return 2===e?String(t+1).padStart(2,"0"):3===e?this.locales.monthsShort[t]:4===e?this.locales.months[t]:String(t+1)}}},1583:(t,e,i)=>{"use strict";const s=i(8125);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setSeconds(this.date.getSeconds()+1)}down(){this.date.setSeconds(this.date.getSeconds()-1)}setTo(t){this.date.setSeconds(parseInt(t.substr(-2)))}toString(){let t=this.date.getSeconds();return this.token.length>1?String(t).padStart(2,"0"):t}}},7971:(t,e,i)=>{"use strict";const s=i(8125);t.exports=class extends s{constructor(t={}){super(t)}up(){this.date.setFullYear(this.date.getFullYear()+1)}down(){this.date.setFullYear(this.date.getFullYear()-1)}setTo(t){this.date.setFullYear(t.substr(-4))}toString(){let t=String(this.date.getFullYear()).padStart(4,"0");return 2===this.token.length?t.substr(-2):t}}},4391:(t,e,i)=>{"use strict";const s=i(2263),r=i(5276),{erase:n,cursor:o}=i(3700),{style:h,clear:l,figures:c,wrap:a,entriesToDisplay:u}=i(9863),d=(t,e)=>t[e]&&(t[e].value||t[e].title||t[e]),p=(t,e)=>t[e]&&(t[e].title||t[e].value||t[e]);t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.suggest=t.suggest,this.choices=t.choices,this.initial="number"==typeof t.initial?t.initial:((t,e)=>{const i=t.findIndex((t=>t.value===e||t.title===e));return i>-1?i:void 0})(t.choices,t.initial),this.select=this.initial||t.cursor||0,this.i18n={noMatches:t.noMatches||"no matches found"},this.fallback=t.fallback||this.initial,this.clearFirst=t.clearFirst||!1,this.suggestions=[],this.input="",this.limit=t.limit||10,this.cursor=0,this.transform=h.render(t.style),this.scale=this.transform.scale,this.render=this.render.bind(this),this.complete=this.complete.bind(this),this.clear=l("",this.out.columns),this.complete(this.render),this.render()}set fallback(t){this._fb=Number.isSafeInteger(parseInt(t))?parseInt(t):t}get fallback(){let t;return"number"==typeof this._fb?t=this.choices[this._fb]:"string"==typeof this._fb&&(t={title:this._fb}),t||this._fb||{title:this.i18n.noMatches}}moveSelect(t){this.select=t,this.suggestions.length>0?this.value=d(this.suggestions,t):this.value=this.fallback.value,this.fire()}async complete(t){const e=this.completing=this.suggest(this.input,this.choices),i=await e;if(this.completing!==e)return;this.suggestions=i.map(((t,e,i)=>({title:p(i,e),value:d(i,e),description:t.description}))),this.completing=!1;const s=Math.max(i.length-1,0);this.moveSelect(Math.min(s,this.select)),t&&t()}reset(){this.input="",this.complete((()=>{this.moveSelect(void 0!==this.initial?this.initial:0),this.render()})),this.render()}exit(){this.clearFirst&&this.input.length>0?this.reset():(this.done=this.exited=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}abort(){this.done=this.aborted=!0,this.exited=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.done=!0,this.aborted=this.exited=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}_(t,e){let i=this.input.slice(0,this.cursor),s=this.input.slice(this.cursor);this.input=`${i}${t}${s}`,this.cursor=i.length+1,this.complete(this.render),this.render()}delete(){if(0===this.cursor)return this.bell();let t=this.input.slice(0,this.cursor-1),e=this.input.slice(this.cursor);this.input=`${t}${e}`,this.complete(this.render),this.cursor=this.cursor-1,this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();let t=this.input.slice(0,this.cursor),e=this.input.slice(this.cursor+1);this.input=`${t}${e}`,this.complete(this.render),this.render()}first(){this.moveSelect(0),this.render()}last(){this.moveSelect(this.suggestions.length-1),this.render()}up(){0===this.select?this.moveSelect(this.suggestions.length-1):this.moveSelect(this.select-1),this.render()}down(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}next(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}nextPage(){this.moveSelect(Math.min(this.select+this.limit,this.suggestions.length-1)),this.render()}prevPage(){this.moveSelect(Math.max(this.select-this.limit,0)),this.render()}left(){if(this.cursor<=0)return this.bell();this.cursor=this.cursor-1,this.render()}right(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();this.cursor=this.cursor+1,this.render()}renderOption(t,e,i,r){let n,o=i?c.arrowUp:r?c.arrowDown:" ",h=e?s.cyan().underline(t.title):t.title;return o=(e?s.cyan(c.pointer)+" ":"  ")+o,t.description&&(n=` - ${t.description}`,(o.length+h.length+n.length>=this.out.columns||t.description.split(/\r?\n/).length>1)&&(n="\n"+a(t.description,{margin:3,width:this.out.columns}))),o+" "+h+s.gray(n||"")}render(){if(this.closed)return;this.firstRender?this.out.write(o.hide):this.out.write(l(this.outputText,this.out.columns)),super.render();let{startIndex:t,endIndex:e}=u(this.select,this.choices.length,this.limit);if(this.outputText=[h.symbol(this.done,this.aborted,this.exited),s.bold(this.msg),h.delimiter(this.completing),this.done&&this.suggestions[this.select]?this.suggestions[this.select].title:this.rendered=this.transform.render(this.input)].join(" "),!this.done){const i=this.suggestions.slice(t,e).map(((i,s)=>this.renderOption(i,this.select===s+t,0===s&&t>0,s+t===e-1&&e<this.choices.length))).join("\n");this.outputText+="\n"+(i||s.gray(this.fallback.title))}this.out.write(n.line+o.to(0)+this.outputText)}}},9086:(t,e,i)=>{"use strict";const s=i(2263),{cursor:r}=i(3700),n=i(35),{clear:o,style:h,figures:l}=i(9863);t.exports=class extends n{constructor(t={}){t.overrideRender=!0,super(t),this.inputValue="",this.clear=o("",this.out.columns),this.filteredOptions=this.value,this.render()}last(){this.cursor=this.filteredOptions.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.filteredOptions.length,this.render()}up(){0===this.cursor?this.cursor=this.filteredOptions.length-1:this.cursor--,this.render()}down(){this.cursor===this.filteredOptions.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.filteredOptions[this.cursor].selected=!1,this.render()}right(){if(this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();this.filteredOptions[this.cursor].selected=!0,this.render()}delete(){this.inputValue.length&&(this.inputValue=this.inputValue.substr(0,this.inputValue.length-1),this.updateFilteredOptions())}updateFilteredOptions(){const t=this.filteredOptions[this.cursor];this.filteredOptions=this.value.filter((t=>!this.inputValue||!("string"!=typeof t.title||!t.title.toLowerCase().includes(this.inputValue.toLowerCase()))||!("string"!=typeof t.value||!t.value.toLowerCase().includes(this.inputValue.toLowerCase()))));const e=this.filteredOptions.findIndex((e=>e===t));this.cursor=e<0?0:e,this.render()}handleSpaceToggle(){const t=this.filteredOptions[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}handleInputChange(t){this.inputValue=this.inputValue+t,this.updateFilteredOptions()}_(t,e){" "===t?this.handleSpaceToggle():this.handleInputChange(t)}renderInstructions(){return void 0===this.instructions||this.instructions?"string"==typeof this.instructions?this.instructions:`\nInstructions:\n    ${l.arrowUp}/${l.arrowDown}: Highlight option\n    ${l.arrowLeft}/${l.arrowRight}/[space]: Toggle selection\n    [a,b,c]/delete: Filter choices\n    enter/return: Complete answer\n`:""}renderCurrentInput(){return`\nFiltered results for: ${this.inputValue?this.inputValue:s.gray("Enter something to filter")}\n`}renderOption(t,e,i){let r;return r=e.disabled?t===i?s.gray().underline(e.title):s.strikethrough().gray(e.title):t===i?s.cyan().underline(e.title):e.title,(e.selected?s.green(l.radioOn):l.radioOff)+"  "+r}renderDoneOrInstructions(){if(this.done)return this.value.filter((t=>t.selected)).map((t=>t.title)).join(", ");const t=[s.gray(this.hint),this.renderInstructions(),this.renderCurrentInput()];return this.filteredOptions.length&&this.filteredOptions[this.cursor].disabled&&t.push(s.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(r.hide),super.render();let t=[h.symbol(this.done,this.aborted),s.bold(this.msg),h.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=s.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.filteredOptions),this.out.write(this.clear+t),this.clear=o(t,this.out.columns)}}},8700:(t,e,i)=>{const s=i(2263),r=i(5276),{style:n,clear:o}=i(9863),{erase:h,cursor:l}=i(3700);t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.value=t.initial,this.initialValue=!!t.initial,this.yesMsg=t.yes||"yes",this.yesOption=t.yesOption||"(Y/n)",this.noMsg=t.no||"no",this.noOption=t.noOption||"(y/N)",this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.value=this.value||!1,this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}_(t,e){return"y"===t.toLowerCase()?(this.value=!0,this.submit()):"n"===t.toLowerCase()?(this.value=!1,this.submit()):this.bell()}render(){this.closed||(this.firstRender?this.out.write(l.hide):this.out.write(o(this.outputText,this.out.columns)),super.render(),this.outputText=[n.symbol(this.done,this.aborted),s.bold(this.msg),n.delimiter(this.done),this.done?this.value?this.yesMsg:this.noMsg:s.gray(this.initialValue?this.yesOption:this.noOption)].join(" "),this.out.write(h.line+l.to(0)+this.outputText))}}},3705:(t,e,i)=>{"use strict";const s=i(2263),r=i(5276),{style:n,clear:o,figures:h}=i(9863),{erase:l,cursor:c}=i(3700),{DatePart:a,Meridiem:u,Day:d,Hours:p,Milliseconds:f,Minutes:m,Month:g,Seconds:y,Year:v}=i(4616),b=/\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g,w={1:({token:t})=>t.replace(/\\(.)/g,"$1"),2:t=>new d(t),3:t=>new g(t),4:t=>new v(t),5:t=>new u(t),6:t=>new p(t),7:t=>new m(t),8:t=>new y(t),9:t=>new f(t)},S={months:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),monthsShort:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),weekdaysShort:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(",")};t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.cursor=0,this.typed="",this.locales=Object.assign(S,t.locales),this._date=t.initial||new Date,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.mask=t.mask||"YYYY-MM-DD HH:mm:ss",this.clear=o("",this.out.columns),this.render()}get value(){return this.date}get date(){return this._date}set date(t){t&&this._date.setTime(t.getTime())}set mask(t){let e;for(this.parts=[];e=b.exec(t);){let t=e.shift(),i=e.findIndex((t=>null!=t));this.parts.push(i in w?w[i]({token:e[i]||t,date:this.date,parts:this.parts,locales:this.locales}):e[i]||t)}let i=this.parts.reduce(((t,e)=>("string"==typeof e&&"string"==typeof t[t.length-1]?t[t.length-1]+=e:t.push(e),t)),[]);this.parts.splice(0),this.parts.push(...i),this.reset()}moveCursor(t){this.typed="",this.cursor=t,this.fire()}reset(){this.moveCursor(this.parts.findIndex((t=>t instanceof a))),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}async validate(){let t=await this.validator(this.value);"string"==typeof t&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(await this.validate(),this.error)return this.color="red",this.fire(),void this.render();this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}up(){this.typed="",this.parts[this.cursor].up(),this.render()}down(){this.typed="",this.parts[this.cursor].down(),this.render()}left(){let t=this.parts[this.cursor].prev();if(null==t)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}right(){let t=this.parts[this.cursor].next();if(null==t)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}next(){let t=this.parts[this.cursor].next();this.moveCursor(t?this.parts.indexOf(t):this.parts.findIndex((t=>t instanceof a))),this.render()}_(t){/\d/.test(t)&&(this.typed+=t,this.parts[this.cursor].setTo(this.typed),this.render())}render(){this.closed||(this.firstRender?this.out.write(c.hide):this.out.write(o(this.outputText,this.out.columns)),super.render(),this.outputText=[n.symbol(this.done,this.aborted),s.bold(this.msg),n.delimiter(!1),this.parts.reduce(((t,e,i)=>t.concat(i!==this.cursor||this.done?e:s.cyan().underline(e.toString()))),[]).join("")].join(" "),this.error&&(this.outputText+=this.errorMsg.split("\n").reduce(((t,e,i)=>t+`\n${i?" ":h.pointerSmall} ${s.red().italic(e)}`),"")),this.out.write(l.line+c.to(0)+this.outputText))}}},1078:(t,e,i)=>{"use strict";t.exports={TextPrompt:i(4825),SelectPrompt:i(7743),TogglePrompt:i(9932),DatePrompt:i(3705),NumberPrompt:i(2594),MultiselectPrompt:i(35),AutocompletePrompt:i(4391),AutocompleteMultiselectPrompt:i(9086),ConfirmPrompt:i(8700)}},35:(t,e,i)=>{"use strict";const s=i(2263),{cursor:r}=i(3700),n=i(5276),{clear:o,figures:h,style:l,wrap:c,entriesToDisplay:a}=i(9863);t.exports=class extends n{constructor(t={}){super(t),this.msg=t.message,this.cursor=t.cursor||0,this.scrollIndex=t.cursor||0,this.hint=t.hint||"",this.warn=t.warn||"- This option is disabled -",this.minSelected=t.min,this.showMinError=!1,this.maxChoices=t.max,this.instructions=t.instructions,this.optionsPerPage=t.optionsPerPage||10,this.value=t.choices.map(((t,e)=>("string"==typeof t&&(t={title:t,value:e}),{title:t&&(t.title||t.value||t),description:t&&t.description,value:t&&(void 0===t.value?e:t.value),selected:t&&t.selected,disabled:t&&t.disabled}))),this.clear=o("",this.out.columns),t.overrideRender||this.render()}reset(){this.value.map((t=>!t.selected)),this.cursor=0,this.fire(),this.render()}selected(){return this.value.filter((t=>t.selected))}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){const t=this.value.filter((t=>t.selected));this.minSelected&&t.length<this.minSelected?(this.showMinError=!0,this.render()):(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.value.length,this.render()}up(){0===this.cursor?this.cursor=this.value.length-1:this.cursor--,this.render()}down(){this.cursor===this.value.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.value[this.cursor].selected=!1,this.render()}right(){if(this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();this.value[this.cursor].selected=!0,this.render()}handleSpaceToggle(){const t=this.value[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}toggleAll(){if(void 0!==this.maxChoices||this.value[this.cursor].disabled)return this.bell();const t=!this.value[this.cursor].selected;this.value.filter((t=>!t.disabled)).forEach((e=>e.selected=t)),this.render()}_(t,e){if(" "===t)this.handleSpaceToggle();else{if("a"!==t)return this.bell();this.toggleAll()}}renderInstructions(){return void 0===this.instructions||this.instructions?"string"==typeof this.instructions?this.instructions:`\nInstructions:\n    ${h.arrowUp}/${h.arrowDown}: Highlight option\n    ${h.arrowLeft}/${h.arrowRight}/[space]: Toggle selection\n`+(void 0===this.maxChoices?"    a: Toggle all\n":"")+"    enter/return: Complete answer":""}renderOption(t,e,i,r){const n=(e.selected?s.green(h.radioOn):h.radioOff)+" "+r+" ";let o,l;return e.disabled?o=t===i?s.gray().underline(e.title):s.strikethrough().gray(e.title):(o=t===i?s.cyan().underline(e.title):e.title,t===i&&e.description&&(l=` - ${e.description}`,(n.length+o.length+l.length>=this.out.columns||e.description.split(/\r?\n/).length>1)&&(l="\n"+c(e.description,{margin:n.length,width:this.out.columns})))),n+o+s.gray(l||"")}paginateOptions(t){if(0===t.length)return s.red("No matches for this query.");let e,{startIndex:i,endIndex:r}=a(this.cursor,t.length,this.optionsPerPage),n=[];for(let s=i;s<r;s++)e=s===i&&i>0?h.arrowUp:s===r-1&&r<t.length?h.arrowDown:" ",n.push(this.renderOption(this.cursor,t[s],s,e));return"\n"+n.join("\n")}renderOptions(t){return this.done?"":this.paginateOptions(t)}renderDoneOrInstructions(){if(this.done)return this.value.filter((t=>t.selected)).map((t=>t.title)).join(", ");const t=[s.gray(this.hint),this.renderInstructions()];return this.value[this.cursor].disabled&&t.push(s.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(r.hide),super.render();let t=[l.symbol(this.done,this.aborted),s.bold(this.msg),l.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=s.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.value),this.out.write(this.clear+t),this.clear=o(t,this.out.columns)}}},2594:(t,e,i)=>{const s=i(2263),r=i(5276),{cursor:n,erase:o}=i(3700),{style:h,figures:l,clear:c,lines:a}=i(9863),u=/[0-9]/,d=t=>void 0!==t,p=(t,e)=>{let i=Math.pow(10,e);return Math.round(t*i)/i};t.exports=class extends r{constructor(t={}){super(t),this.transform=h.render(t.style),this.msg=t.message,this.initial=d(t.initial)?t.initial:"",this.float=!!t.float,this.round=t.round||2,this.inc=t.increment||1,this.min=d(t.min)?t.min:-1/0,this.max=d(t.max)?t.max:1/0,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.color="cyan",this.value="",this.typed="",this.lastHit=0,this.render()}set value(t){t||0===t?(this.placeholder=!1,this.rendered=this.transform.render(`${p(t,this.round)}`),this._value=p(t,this.round)):(this.placeholder=!0,this.rendered=s.gray(this.transform.render(`${this.initial}`)),this._value=""),this.fire()}get value(){return this._value}parse(t){return this.float?parseFloat(t):parseInt(t)}valid(t){return"-"===t||"."===t&&this.float||u.test(t)}reset(){this.typed="",this.value="",this.fire(),this.render()}exit(){this.abort()}abort(){let t=this.value;this.value=""!==t?t:this.initial,this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}async validate(){let t=await this.validator(this.value);"string"==typeof t&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(await this.validate(),this.error)return this.color="red",this.fire(),void this.render();let t=this.value;this.value=""!==t?t:this.initial,this.done=!0,this.aborted=!1,this.error=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}up(){if(this.typed="",""===this.value&&(this.value=this.min-this.inc),this.value>=this.max)return this.bell();this.value+=this.inc,this.color="cyan",this.fire(),this.render()}down(){if(this.typed="",""===this.value&&(this.value=this.min+this.inc),this.value<=this.min)return this.bell();this.value-=this.inc,this.color="cyan",this.fire(),this.render()}delete(){let t=this.value.toString();if(0===t.length)return this.bell();this.value=this.parse(t=t.slice(0,-1))||"",""!==this.value&&this.value<this.min&&(this.value=this.min),this.color="cyan",this.fire(),this.render()}next(){this.value=this.initial,this.fire(),this.render()}_(t,e){if(!this.valid(t))return this.bell();const i=Date.now();if(i-this.lastHit>1e3&&(this.typed=""),this.typed+=t,this.lastHit=i,this.color="cyan","."===t)return this.fire();this.value=Math.min(this.parse(this.typed),this.max),this.value>this.max&&(this.value=this.max),this.value<this.min&&(this.value=this.min),this.fire(),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(n.down(a(this.outputError,this.out.columns)-1)+c(this.outputError,this.out.columns)),this.out.write(c(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[h.symbol(this.done,this.aborted),s.bold(this.msg),h.delimiter(this.done),this.done&&(this.done||this.placeholder)?this.rendered:s[this.color]().underline(this.rendered)].join(" "),this.error&&(this.outputError+=this.errorMsg.split("\n").reduce(((t,e,i)=>t+`\n${i?" ":l.pointerSmall} ${s.red().italic(e)}`),"")),this.out.write(o.line+n.to(0)+this.outputText+n.save+this.outputError+n.restore))}}},5276:(t,e,i)=>{"use strict";const s=i(4521),{action:r}=i(9863),n=i(2361),{beep:o,cursor:h}=i(3700),l=i(2263);t.exports=class extends n{constructor(t={}){super(),this.firstRender=!0,this.in=t.stdin||process.stdin,this.out=t.stdout||process.stdout,this.onRender=(t.onRender||(()=>{})).bind(this);const e=s.createInterface({input:this.in,escapeCodeTimeout:50});s.emitKeypressEvents(this.in,e),this.in.isTTY&&this.in.setRawMode(!0);const i=["SelectPrompt","MultiselectPrompt"].indexOf(this.constructor.name)>-1,n=(t,e)=>{let s=r(e,i);!1===s?this._&&this._(t,e):"function"==typeof this[s]?this[s](e):this.bell()};this.close=()=>{this.out.write(h.show),this.in.removeListener("keypress",n),this.in.isTTY&&this.in.setRawMode(!1),e.close(),this.emit(this.aborted?"abort":this.exited?"exit":"submit",this.value),this.closed=!0},this.in.on("keypress",n)}fire(){this.emit("state",{value:this.value,aborted:!!this.aborted,exited:!!this.exited})}bell(){this.out.write(o)}render(){this.onRender(l),this.firstRender&&(this.firstRender=!1)}}},7743:(t,e,i)=>{"use strict";const s=i(2263),r=i(5276),{style:n,clear:o,figures:h,wrap:l,entriesToDisplay:c}=i(9863),{cursor:a}=i(3700);t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.hint=t.hint||"- Use arrow-keys. Return to submit.",this.warn=t.warn||"- This option is disabled",this.cursor=t.initial||0,this.choices=t.choices.map(((t,e)=>("string"==typeof t&&(t={title:t,value:e}),{title:t&&(t.title||t.value||t),value:t&&(void 0===t.value?e:t.value),description:t&&t.description,selected:t&&t.selected,disabled:t&&t.disabled}))),this.optionsPerPage=t.optionsPerPage||10,this.value=(this.choices[this.cursor]||{}).value,this.clear=o("",this.out.columns),this.render()}moveCursor(t){this.cursor=t,this.value=this.choices[t].value,this.fire()}reset(){this.moveCursor(0),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.selection.disabled?this.bell():(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}first(){this.moveCursor(0),this.render()}last(){this.moveCursor(this.choices.length-1),this.render()}up(){0===this.cursor?this.moveCursor(this.choices.length-1):this.moveCursor(this.cursor-1),this.render()}down(){this.cursor===this.choices.length-1?this.moveCursor(0):this.moveCursor(this.cursor+1),this.render()}next(){this.moveCursor((this.cursor+1)%this.choices.length),this.render()}_(t,e){if(" "===t)return this.submit()}get selection(){return this.choices[this.cursor]}render(){if(this.closed)return;this.firstRender?this.out.write(a.hide):this.out.write(o(this.outputText,this.out.columns)),super.render();let{startIndex:t,endIndex:e}=c(this.cursor,this.choices.length,this.optionsPerPage);if(this.outputText=[n.symbol(this.done,this.aborted),s.bold(this.msg),n.delimiter(!1),this.done?this.selection.title:this.selection.disabled?s.yellow(this.warn):s.gray(this.hint)].join(" "),!this.done){this.outputText+="\n";for(let i=t;i<e;i++){let r,n,o="",c=this.choices[i];n=i===t&&t>0?h.arrowUp:i===e-1&&e<this.choices.length?h.arrowDown:" ",c.disabled?(r=this.cursor===i?s.gray().underline(c.title):s.strikethrough().gray(c.title),n=(this.cursor===i?s.bold().gray(h.pointer)+" ":"  ")+n):(r=this.cursor===i?s.cyan().underline(c.title):c.title,n=(this.cursor===i?s.cyan(h.pointer)+" ":"  ")+n,c.description&&this.cursor===i&&(o=` - ${c.description}`,(n.length+r.length+o.length>=this.out.columns||c.description.split(/\r?\n/).length>1)&&(o="\n"+l(c.description,{margin:3,width:this.out.columns})))),this.outputText+=`${n} ${r}${s.gray(o)}\n`}}this.out.write(this.outputText)}}},4825:(t,e,i)=>{const s=i(2263),r=i(5276),{erase:n,cursor:o}=i(3700),{style:h,clear:l,lines:c,figures:a}=i(9863);t.exports=class extends r{constructor(t={}){super(t),this.transform=h.render(t.style),this.scale=this.transform.scale,this.msg=t.message,this.initial=t.initial||"",this.validator=t.validate||(()=>!0),this.value="",this.errorMsg=t.error||"Please Enter A Valid Value",this.cursor=Number(!!this.initial),this.cursorOffset=0,this.clear=l("",this.out.columns),this.render()}set value(t){!t&&this.initial?(this.placeholder=!0,this.rendered=s.gray(this.transform.render(this.initial))):(this.placeholder=!1,this.rendered=this.transform.render(t)),this._value=t,this.fire()}get value(){return this._value}reset(){this.value="",this.cursor=Number(!!this.initial),this.cursorOffset=0,this.fire(),this.render()}exit(){this.abort()}abort(){this.value=this.value||this.initial,this.done=this.aborted=!0,this.error=!1,this.red=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}async validate(){let t=await this.validator(this.value);"string"==typeof t&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(this.value=this.value||this.initial,this.cursorOffset=0,this.cursor=this.rendered.length,await this.validate(),this.error)return this.red=!0,this.fire(),void this.render();this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}next(){if(!this.placeholder)return this.bell();this.value=this.initial,this.cursor=this.rendered.length,this.fire(),this.render()}moveCursor(t){this.placeholder||(this.cursor=this.cursor+t,this.cursorOffset+=t)}_(t,e){let i=this.value.slice(0,this.cursor),s=this.value.slice(this.cursor);this.value=`${i}${t}${s}`,this.red=!1,this.cursor=this.placeholder?0:i.length+1,this.render()}delete(){if(this.isCursorAtStart())return this.bell();let t=this.value.slice(0,this.cursor-1),e=this.value.slice(this.cursor);this.value=`${t}${e}`,this.red=!1,this.isCursorAtStart()?this.cursorOffset=0:(this.cursorOffset++,this.moveCursor(-1)),this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();let t=this.value.slice(0,this.cursor),e=this.value.slice(this.cursor+1);this.value=`${t}${e}`,this.red=!1,this.isCursorAtEnd()?this.cursorOffset=0:this.cursorOffset++,this.render()}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length,this.render()}left(){if(this.cursor<=0||this.placeholder)return this.bell();this.moveCursor(-1),this.render()}right(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();this.moveCursor(1),this.render()}isCursorAtStart(){return 0===this.cursor||this.placeholder&&1===this.cursor}isCursorAtEnd(){return this.cursor===this.rendered.length||this.placeholder&&this.cursor===this.rendered.length+1}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(o.down(c(this.outputError,this.out.columns)-1)+l(this.outputError,this.out.columns)),this.out.write(l(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[h.symbol(this.done,this.aborted),s.bold(this.msg),h.delimiter(this.done),this.red?s.red(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split("\n").reduce(((t,e,i)=>t+`\n${i?" ":a.pointerSmall} ${s.red().italic(e)}`),"")),this.out.write(n.line+o.to(0)+this.outputText+o.save+this.outputError+o.restore+o.move(this.cursorOffset,0)))}}},9932:(t,e,i)=>{const s=i(2263),r=i(5276),{style:n,clear:o}=i(9863),{cursor:h,erase:l}=i(3700);t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.value=!!t.initial,this.active=t.active||"on",this.inactive=t.inactive||"off",this.initialValue=this.value,this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}deactivate(){if(!1===this.value)return this.bell();this.value=!1,this.render()}activate(){if(!0===this.value)return this.bell();this.value=!0,this.render()}delete(){this.deactivate()}left(){this.deactivate()}right(){this.activate()}down(){this.deactivate()}up(){this.activate()}next(){this.value=!this.value,this.fire(),this.render()}_(t,e){if(" "===t)this.value=!this.value;else if("1"===t)this.value=!0;else{if("0"!==t)return this.bell();this.value=!1}this.render()}render(){this.closed||(this.firstRender?this.out.write(h.hide):this.out.write(o(this.outputText,this.out.columns)),super.render(),this.outputText=[n.symbol(this.done,this.aborted),s.bold(this.msg),n.delimiter(this.done),this.value?this.inactive:s.cyan().underline(this.inactive),s.gray("/"),this.value?s.cyan().underline(this.active):this.active].join(" "),this.out.write(l.line+h.to(0)+this.outputText))}}},8916:(t,e,i)=>{"use strict";const s=i(8091),r=["suggest","format","onState","validate","onRender","type"],n=()=>{};async function o(t=[],{onSubmit:e=n,onCancel:i=n}={}){const l={},c=o._override||{};let a,u,d,p,f,m;t=[].concat(t);const g=async(t,e,i=!1)=>{if(i||!t.validate||!0===t.validate(e))return t.format?await t.format(e,l):e};for(u of t)if(({name:p,type:f}=u),"function"==typeof f&&(f=await f(a,{...l},u),u.type=f),f){for(let t in u){if(r.includes(t))continue;let e=u[t];u[t]="function"==typeof e?await e(a,{...l},m):e}if(m=u,"string"!=typeof u.message)throw new Error("prompt message is required");if(({name:p,type:f}=u),void 0===s[f])throw new Error(`prompt type (${f}) is not defined`);if(void 0===c[u.name]||(a=await g(u,c[u.name]),void 0===a)){try{a=o._injected?h(o._injected,u.initial):await s[f](u),l[p]=a=await g(u,a,!0),d=await e(u,a,l)}catch(t){d=!await i(u,l)}if(d)return l}else l[p]=a}return l}function h(t,e){const i=t.shift();if(i instanceof Error)throw i;return void 0===i?e:i}t.exports=Object.assign(o,{prompt:o,prompts:s,inject:function(t){o._injected=(o._injected||[]).concat(t)},override:function(t){o._override=Object.assign({},t)}})},8091:(t,e,i)=>{"use strict";const s=e,r=i(1078),n=t=>t;function o(t,e,i={}){return new Promise(((s,o)=>{const h=new r[t](e),l=i.onAbort||n,c=i.onSubmit||n,a=i.onExit||n;h.on("state",e.onState||n),h.on("submit",(t=>s(c(t)))),h.on("exit",(t=>s(a(t)))),h.on("abort",(t=>o(l(t))))}))}s.text=t=>o("TextPrompt",t),s.password=t=>(t.style="password",s.text(t)),s.invisible=t=>(t.style="invisible",s.text(t)),s.number=t=>o("NumberPrompt",t),s.date=t=>o("DatePrompt",t),s.confirm=t=>o("ConfirmPrompt",t),s.list=t=>{const e=t.separator||",";return o("TextPrompt",t,{onSubmit:t=>t.split(e).map((t=>t.trim()))})},s.toggle=t=>o("TogglePrompt",t),s.select=t=>o("SelectPrompt",t),s.multiselect=t=>{t.choices=[].concat(t.choices||[]);const e=t=>t.filter((t=>t.selected)).map((t=>t.value));return o("MultiselectPrompt",t,{onAbort:e,onSubmit:e})},s.autocompleteMultiselect=t=>{t.choices=[].concat(t.choices||[]);const e=t=>t.filter((t=>t.selected)).map((t=>t.value));return o("AutocompleteMultiselectPrompt",t,{onAbort:e,onSubmit:e})};const h=(t,e)=>Promise.resolve(e.filter((e=>e.title.slice(0,t.length).toLowerCase()===t.toLowerCase())));s.autocomplete=t=>(t.suggest=t.suggest||h,t.choices=[].concat(t.choices||[]),o("AutocompletePrompt",t))},2053:t=>{"use strict";t.exports=(t,e)=>{if(!t.meta||"escape"===t.name){if(t.ctrl){if("a"===t.name)return"first";if("c"===t.name)return"abort";if("d"===t.name)return"abort";if("e"===t.name)return"last";if("g"===t.name)return"reset"}if(e){if("j"===t.name)return"down";if("k"===t.name)return"up"}return"return"===t.name||"enter"===t.name?"submit":"backspace"===t.name?"delete":"delete"===t.name?"deleteForward":"abort"===t.name?"abort":"escape"===t.name?"exit":"tab"===t.name?"next":"pagedown"===t.name?"nextPage":"pageup"===t.name?"prevPage":"home"===t.name?"home":"end"===t.name?"end":"up"===t.name?"up":"down"===t.name?"down":"right"===t.name?"right":"left"===t.name&&"left"}}},7996:(t,e,i)=>{"use strict";const s=i(7286),{erase:r,cursor:n}=i(3700);t.exports=function(t,e){if(!e)return r.line+n.to(0);let i=0;const o=t.split(/\r?\n/);for(let t of o)i+=1+Math.floor(Math.max([...s(t)].length-1,0)/e);return r.lines(i)}},3946:t=>{"use strict";t.exports=(t,e,i)=>{i=i||e;let s=Math.min(e-i,t-Math.floor(i/2));return s<0&&(s=0),{startIndex:s,endIndex:Math.min(s+i,e)}}},5557:t=>{"use strict";const e={arrowUp:"↑",arrowDown:"↓",arrowLeft:"←",arrowRight:"→",radioOn:"◉",radioOff:"◯",tick:"✔",cross:"✖",ellipsis:"…",pointerSmall:"›",line:"─",pointer:"❯"},i={arrowUp:e.arrowUp,arrowDown:e.arrowDown,arrowLeft:e.arrowLeft,arrowRight:e.arrowRight,radioOn:"(*)",radioOff:"( )",tick:"√",cross:"×",ellipsis:"...",pointerSmall:"»",line:"─",pointer:">"},s="win32"===process.platform?i:e;t.exports=s},9863:(t,e,i)=>{"use strict";t.exports={action:i(2053),clear:i(7996),style:i(1842),strip:i(7286),figures:i(5557),lines:i(3401),wrap:i(8834),entriesToDisplay:i(3946)}},3401:(t,e,i)=>{"use strict";const s=i(7286);t.exports=function(t,e){let i=String(s(t)||"").split(/\r?\n/);return e?i.map((t=>Math.ceil(t.length/e))).reduce(((t,e)=>t+e)):i.length}},7286:t=>{"use strict";t.exports=t=>{const e=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"].join("|"),i=new RegExp(e,"g");return"string"==typeof t?t.replace(i,""):t}},1842:(t,e,i)=>{"use strict";const s=i(2263),r=i(5557),n=Object.freeze({password:{scale:1,render:t=>"*".repeat(t.length)},emoji:{scale:2,render:t=>"😃".repeat(t.length)},invisible:{scale:0,render:t=>""},default:{scale:1,render:t=>`${t}`}}),o=Object.freeze({aborted:s.red(r.cross),done:s.green(r.tick),exited:s.yellow(r.cross),default:s.cyan("?")});t.exports={styles:n,render:t=>n[t]||n.default,symbols:o,symbol:(t,e,i)=>e?o.aborted:i?o.exited:t?o.done:o.default,delimiter:t=>s.gray(t?r.ellipsis:r.pointerSmall),item:(t,e)=>s.gray(t?e?r.pointerSmall:"+":r.line)}},8834:t=>{"use strict";t.exports=(t,e={})=>{const i=Number.isSafeInteger(parseInt(e.margin))?new Array(parseInt(e.margin)).fill(" ").join(""):e.margin||"",s=e.width;return(t||"").split(/\r?\n/g).map((t=>t.split(/\s+/g).reduce(((t,e)=>(e.length+i.length>=s||t[t.length-1].length+e.length+1<s?t[t.length-1]+=` ${e}`:t.push(`${i}${e}`),t)),[i]).join("\n"))).join("\n")}},3700:t=>{"use strict";const e={to:(t,e)=>e?`[${e+1};${t+1}H`:`[${t+1}G`,move(t,e){let i="";return t<0?i+=`[${-t}D`:t>0&&(i+=`[${t}C`),e<0?i+=`[${-e}A`:e>0&&(i+=`[${e}B`),i},up:(t=1)=>`[${t}A`,down:(t=1)=>`[${t}B`,forward:(t=1)=>`[${t}C`,backward:(t=1)=>`[${t}D`,nextLine:(t=1)=>"[E".repeat(t),prevLine:(t=1)=>"[F".repeat(t),left:"[G",hide:"[?25l",show:"[?25h",save:"7",restore:"8"},i={screen:"[2J",up:(t=1)=>"[1J".repeat(t),down:(t=1)=>"[J".repeat(t),line:"[2K",lineEnd:"[K",lineStart:"[1K",lines(t){let i="";for(let s=0;s<t;s++)i+=this.line+(s<t-1?e.up():"");return t&&(i+=e.left),i}};t.exports={cursor:e,scroll:{up:(t=1)=>"[S".repeat(t),down:(t=1)=>"[T".repeat(t)},erase:i,beep:""}},866:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(9381),r=i(8238),n=i(1017),o=process.cwd();e.default=t=>{const{projectName:e,pickPresets:i,hasProjectDir:h}=t,l=(0,n.join)(o,e);h?(0,r.removeSync)(l):(0,r.ensureDirSync)(l),"react"===i&&(0,r.copySync)(((...t)=>(0,n.resolve)(__dirname,"../template",...t))("typescript-react"),l),console.log("\nDone. Now run:\n"),l!==o&&console.log(`  ${(0,s.bold)((0,s.green)(`cd ${(0,n.relative)(o,l)}`))}`),console.log(`  ${(0,s.bold)((0,s.green)("pnpm install"))}\n\n`)}},7384:function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=s(i(866)),n=s(i(2403));(async()=>{const t=await(0,n.default)();t&&(0,r.default)(t)})()},2403:function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=s(i(4995)),n=i(9381),o=s(i(5076)),h=i(7147),l=(0,o.default)(process.argv.slice(2))._[0],c=l||"create-app",a=[{name:"projectName",type:l?null:"text",message:"Project Name:",initial:c},{name:"hasProjectDir",type:()=>{return t=c,(0,h.existsSync)(t)&&(0,h.readdirSync)(t).length?"toggle":null;var t},message:"Now Current directory has files. Do you wanting Remove existing files and continue?",initial:!0,active:"yes",inactive:"no"},{name:"checkStep",type:(t,e)=>{const{shouldOverwrite:i}=e;return i&&!i&&console.log(`  ${(0,n.red)("✖ 取消操作")}`),null}},{name:"pickPresets",type:"select",message:"请选择一个预设",choices:[{title:"vue ()",value:"vue"},{title:"react (eslint prettier husky)",value:"react"}]}];e.default=async()=>{try{return{...await(0,r.default)(a,{onCancel:()=>{throw new Error("取消操作")}}),projectName:c}}catch(t){console.log(`  ${(0,n.red)("✖ "+t.message)}`),process.exit(1)}}},9962:(t,e)=>{"use strict";e.fromCallback=function(t){return Object.defineProperty((function(...e){if("function"!=typeof e[e.length-1])return new Promise(((i,s)=>{t.call(this,...e,((t,e)=>null!=t?s(t):i(e)))}));t.apply(this,e)}),"name",{value:t.name})},e.fromPromise=function(t){return Object.defineProperty((function(...e){const i=e[e.length-1];if("function"!=typeof i)return t.apply(this,e);t.apply(this,e.slice(0,-1)).then((t=>i(null,t)),i)}),"name",{value:t.name})}},9491:t=>{"use strict";t.exports=require("assert")},2057:t=>{"use strict";t.exports=require("constants")},2361:t=>{"use strict";t.exports=require("events")},7147:t=>{"use strict";t.exports=require("fs")},1017:t=>{"use strict";t.exports=require("path")},4521:t=>{"use strict";t.exports=require("readline")},2781:t=>{"use strict";t.exports=require("stream")},3837:t=>{"use strict";t.exports=require("util")}},e={};!function i(s){var r=e[s];if(void 0!==r)return r.exports;var n=e[s]={exports:{}};return t[s].call(n.exports,n,n.exports,i),n.exports}(7384)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,